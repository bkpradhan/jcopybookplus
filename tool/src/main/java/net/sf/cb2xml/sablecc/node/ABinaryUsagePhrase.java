/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

import java.util.*;


public final class ABinaryUsagePhrase extends PUsagePhrase
{
    private TBinary _binary_;
    private TNative _native_;

    public ABinaryUsagePhrase ()
    {
    }

    public ABinaryUsagePhrase (TBinary _binary_, TNative _native_)
    {
        setBinary (_binary_);

        setNative (_native_);
    }

    public Object clone ()
    {
        return new ABinaryUsagePhrase((TBinary) cloneNode (_binary_),
            (TNative) cloneNode (_native_));
    }

    public void apply (Switch sw)
    {
        ((Analysis) sw).caseABinaryUsagePhrase (this);
    }

    public TBinary getBinary ()
    {
        return _binary_;
    }

    public void setBinary (TBinary node)
    {
        if (_binary_ != null)
        {
            _binary_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _binary_ = node;
    }

    public TNative getNative ()
    {
        return _native_;
    }

    public void setNative (TNative node)
    {
        if (_native_ != null)
        {
            _native_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _native_ = node;
    }

    public String toString ()
    {
        return "" + toString (_binary_) + toString (_native_);
    }

    void removeChild (Node child)
    {
        if (_binary_ == child)
        {
            _binary_ = null;

            return;
        }

        if (_native_ == child)
        {
            _native_ = null;

            return;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
        if (_binary_ == oldChild)
        {
            setBinary ((TBinary) newChild);

            return;
        }

        if (_native_ == oldChild)
        {
            setNative ((TNative) newChild);

            return;
        }
    }
}
