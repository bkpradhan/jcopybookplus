/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

import java.util.*;


public final class ASynchronizedClause extends PSynchronizedClause
{
    private TSynchronized _synchronized_;
    private PLeftOrRight _leftOrRight_;

    public ASynchronizedClause ()
    {
    }

    public ASynchronizedClause (TSynchronized _synchronized_,
        PLeftOrRight _leftOrRight_)
    {
        setSynchronized (_synchronized_);

        setLeftOrRight (_leftOrRight_);
    }

    public Object clone ()
    {
        return new ASynchronizedClause((TSynchronized) cloneNode (
                _synchronized_), (PLeftOrRight) cloneNode (_leftOrRight_));
    }

    public void apply (Switch sw)
    {
        ((Analysis) sw).caseASynchronizedClause (this);
    }

    public TSynchronized getSynchronized ()
    {
        return _synchronized_;
    }

    public void setSynchronized (TSynchronized node)
    {
        if (_synchronized_ != null)
        {
            _synchronized_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _synchronized_ = node;
    }

    public PLeftOrRight getLeftOrRight ()
    {
        return _leftOrRight_;
    }

    public void setLeftOrRight (PLeftOrRight node)
    {
        if (_leftOrRight_ != null)
        {
            _leftOrRight_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _leftOrRight_ = node;
    }

    public String toString ()
    {
        return "" + toString (_synchronized_) + toString (_leftOrRight_);
    }

    void removeChild (Node child)
    {
        if (_synchronized_ == child)
        {
            _synchronized_ = null;

            return;
        }

        if (_leftOrRight_ == child)
        {
            _leftOrRight_ = null;

            return;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
        if (_synchronized_ == oldChild)
        {
            setSynchronized ((TSynchronized) newChild);

            return;
        }

        if (_leftOrRight_ == oldChild)
        {
            setLeftOrRight ((PLeftOrRight) newChild);

            return;
        }
    }
}
