/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.cb2xml.sablecc.lexer;

import java.io.*;
import java.util.*;
import net.sf.cb2xml.sablecc.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TWhiteSpace(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TComment(text, line, pos); }
    Token new2(int line, int pos) { return new TDot(line, pos); }
    Token new3(int line, int pos) { return new TComma(line, pos); }
    Token new4(int line, int pos) { return new TSlash(line, pos); }
    Token new5(int line, int pos) { return new TPlus(line, pos); }
    Token new6(int line, int pos) { return new TMinus(line, pos); }
    Token new7(int line, int pos) { return new TStar(line, pos); }
    Token new8(int line, int pos) { return new TDollar(line, pos); }
    Token new9(int line, int pos) { return new TLparen(line, pos); }
    Token new10(int line, int pos) { return new TRparen(line, pos); }
    Token new11(String text, int line, int pos) { return new TNumber88(text, line, pos); }
    Token new12(String text, int line, int pos) { return new TNumberNot88(text, line, pos); }
    Token new13(String text, int line, int pos) { return new TAlphanumericLiteral(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TNumericLiteral(text, line, pos); }
    Token new15(String text, int line, int pos) { return new TDotZee(text, line, pos); }
    Token new16(String text, int line, int pos) { return new TAll(text, line, pos); }
    Token new17(String text, int line, int pos) { return new TAre(text, line, pos); }
    Token new18(String text, int line, int pos) { return new TAscending(text, line, pos); }
    Token new19(String text, int line, int pos) { return new TBinary(text, line, pos); }
    Token new20(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new21(String text, int line, int pos) { return new TBy(text, line, pos); }
    Token new22(String text, int line, int pos) { return new TCharacter(text, line, pos); }
    Token new23(String text, int line, int pos) { return new TComp(text, line, pos); }
    Token new24(String text, int line, int pos) { return new TComp1(text, line, pos); }
    Token new25(String text, int line, int pos) { return new TComp2(text, line, pos); }
    Token new26(String text, int line, int pos) { return new TComp3(text, line, pos); }
    Token new27(String text, int line, int pos) { return new TComp4(text, line, pos); }
    Token new28(String text, int line, int pos) { return new TComp5(text, line, pos); }
    Token new29(String text, int line, int pos) { return new TDate(text, line, pos); }
    Token new30(String text, int line, int pos) { return new TDepending(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TDescending(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TDisplay(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TDisplay1(text, line, pos); }
    Token new34(String text, int line, int pos) { return new TExternal(text, line, pos); }
    Token new35(String text, int line, int pos) { return new TFiller(text, line, pos); }
    Token new36(String text, int line, int pos) { return new TFormat(text, line, pos); }
    Token new37(String text, int line, int pos) { return new TFunctionPointer(text, line, pos); }
    Token new38(String text, int line, int pos) { return new TGlobal(text, line, pos); }
    Token new39(String text, int line, int pos) { return new THighValues(text, line, pos); }
    Token new40(String text, int line, int pos) { return new TIndex(text, line, pos); }
    Token new41(String text, int line, int pos) { return new TIndexed(text, line, pos); }
    Token new42(String text, int line, int pos) { return new TIs(text, line, pos); }
    Token new43(String text, int line, int pos) { return new TJustified(text, line, pos); }
    Token new44(String text, int line, int pos) { return new TKey(text, line, pos); }
    Token new45(String text, int line, int pos) { return new TLeading(text, line, pos); }
    Token new46(String text, int line, int pos) { return new TLeft(text, line, pos); }
    Token new47(String text, int line, int pos) { return new TLowValues(text, line, pos); }
    Token new48(String text, int line, int pos) { return new TNational(text, line, pos); }
    Token new49(String text, int line, int pos) { return new TNative(text, line, pos); }
    Token new50(String text, int line, int pos) { return new TNulls(text, line, pos); }
    Token new51(String text, int line, int pos) { return new TObject(text, line, pos); }
    Token new52(String text, int line, int pos) { return new TOccurs(text, line, pos); }
    Token new53(String text, int line, int pos) { return new TOn(text, line, pos); }
    Token new54(String text, int line, int pos) { return new TPackedDecimal(text, line, pos); }
    Token new55(String text, int line, int pos) { return new TPicture(text, line, pos); }
    Token new56(String text, int line, int pos) { return new TPointer(text, line, pos); }
    Token new57(String text, int line, int pos) { return new TProcedurePointer(text, line, pos); }
    Token new58(String text, int line, int pos) { return new TQuotes(text, line, pos); }
    Token new59(String text, int line, int pos) { return new TRedefines(text, line, pos); }
    Token new60(String text, int line, int pos) { return new TReference(text, line, pos); }
    Token new61(String text, int line, int pos) { return new TRenames(text, line, pos); }
    Token new62(String text, int line, int pos) { return new TRight(text, line, pos); }
    Token new63(String text, int line, int pos) { return new TSeparate(text, line, pos); }
    Token new64(String text, int line, int pos) { return new TSign(text, line, pos); }
    Token new65(String text, int line, int pos) { return new TSpaces(text, line, pos); }
    Token new66(String text, int line, int pos) { return new TSynchronized(text, line, pos); }
    Token new67(String text, int line, int pos) { return new TThrough(text, line, pos); }
    Token new68(String text, int line, int pos) { return new TTimes(text, line, pos); }
    Token new69(String text, int line, int pos) { return new TTo(text, line, pos); }
    Token new70(String text, int line, int pos) { return new TTrailing(text, line, pos); }
    Token new71(String text, int line, int pos) { return new TUsage(text, line, pos); }
    Token new72(String text, int line, int pos) { return new TValue(text, line, pos); }
    Token new73(String text, int line, int pos) { return new TValues(text, line, pos); }
    Token new74(String text, int line, int pos) { return new TWhen(text, line, pos); }
    Token new75(String text, int line, int pos) { return new TZeros(text, line, pos); }
    Token new76(String text, int line, int pos) { return new TDataName(text, line, pos); }
    Token new77(String text, int line, int pos) { return new TUnknown(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 33, 1}, {34, 34, 6}, {35, 35, 1}, {36, 36, 7}, {37, 38, 1}, {39, 39, 8}, {40, 40, 9}, {41, 41, 10}, {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {46, 46, 15}, {47, 47, 16}, {48, 55, 17}, {56, 56, 18}, {57, 57, 17}, {58, 64, 1}, {65, 65, 19}, {66, 66, 20}, {67, 67, 21}, {68, 68, 22}, {69, 69, 23}, {70, 70, 24}, {71, 71, 25}, {72, 72, 26}, {73, 73, 27}, {74, 74, 28}, {75, 75, 29}, {76, 76, 30}, {77, 77, 31}, {78, 78, 32}, {79, 79, 33}, {80, 80, 34}, {81, 81, 35}, {82, 82, 36}, {83, 83, 37}, {84, 84, 38}, {85, 85, 39}, {86, 86, 40}, {87, 87, 41}, {88, 89, 31}, {90, 90, 42}, {91, 96, 1}, {97, 97, 43}, {98, 98, 44}, {99, 99, 45}, {100, 100, 46}, {101, 101, 47}, {102, 102, 48}, {103, 103, 49}, {104, 104, 50}, {105, 105, 51}, {106, 106, 52}, {107, 107, 53}, {108, 108, 54}, {109, 109, 55}, {110, 110, 56}, {111, 111, 57}, {112, 112, 58}, {113, 113, 59}, {114, 114, 60}, {115, 115, 61}, {116, 116, 62}, {117, 117, 63}, {118, 118, 64}, {119, 119, 65}, {120, 121, 55}, {122, 122, 66}, {123, 65535, 1}, },
            {},
            {{9, 9, 67}, {10, 10, 68}, {13, 13, 69}, {32, 32, 70}, },
            {{9, 32, -4}, },
            {{9, 9, 67}, {10, 10, 71}, {13, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 33, 72}, {34, 34, 73}, {35, 65535, 72}, },
            {},
            {{0, 38, 74}, {39, 39, 75}, {40, 65535, 74}, },
            {},
            {},
            {{0, 9, 76}, {10, 10, 77}, {11, 12, 76}, {13, 13, 78}, {14, 65535, 76}, },
            {{46, 46, 79}, {48, 57, 80}, },
            {},
            {{46, 57, -14}, },
            {{48, 57, 81}, {90, 90, 82}, },
            {},
            {{46, 46, 79}, {48, 57, 83}, {65, 90, 84}, {97, 122, 85}, },
            {{46, 46, 79}, {48, 55, 83}, {56, 56, 86}, {57, 57, 83}, {65, 122, -19}, },
            {{45, 45, 87}, {48, 57, 88}, {65, 75, 89}, {76, 76, 90}, {77, 81, 89}, {82, 82, 91}, {83, 83, 92}, {84, 90, 89}, {97, 107, 93}, {108, 108, 94}, {109, 113, 93}, {114, 114, 95}, {115, 115, 96}, {116, 122, 93}, },
            {{45, 57, -21}, {65, 72, 89}, {73, 73, 97}, {74, 75, 89}, {76, 76, 98}, {77, 88, 89}, {89, 89, 99}, {90, 90, 89}, {97, 104, 93}, {105, 105, 100}, {106, 107, 93}, {108, 108, 101}, {109, 120, 93}, {121, 121, 102}, {122, 122, 93}, },
            {{45, 57, -21}, {65, 71, 89}, {72, 72, 103}, {73, 78, 89}, {79, 79, 104}, {80, 90, 89}, {97, 103, 93}, {104, 104, 105}, {105, 110, 93}, {111, 111, 106}, {112, 122, 93}, },
            {{45, 57, -21}, {65, 65, 107}, {66, 68, 89}, {69, 69, 108}, {70, 72, 89}, {73, 73, 109}, {74, 90, 89}, {97, 97, 110}, {98, 100, 93}, {101, 101, 111}, {102, 104, 93}, {105, 105, 112}, {106, 122, 93}, },
            {{45, 57, -21}, {65, 87, 89}, {88, 88, 113}, {89, 90, 89}, {97, 119, 93}, {120, 120, 114}, {121, 122, 93}, },
            {{45, 72, -22}, {73, 73, 115}, {74, 78, 89}, {79, 79, 116}, {80, 84, 89}, {85, 85, 117}, {86, 90, 89}, {97, 104, 93}, {105, 105, 118}, {106, 110, 93}, {111, 111, 119}, {112, 116, 93}, {117, 117, 120}, {118, 122, 93}, },
            {{45, 75, -21}, {76, 76, 121}, {77, 90, 89}, {97, 107, 93}, {108, 108, 122}, {109, 122, 93}, },
            {{45, 72, -22}, {73, 73, 123}, {74, 90, 89}, {97, 104, 93}, {105, 105, 124}, {106, 122, 93}, },
            {{45, 57, -21}, {65, 77, 89}, {78, 78, 125}, {79, 82, 89}, {83, 83, 126}, {84, 90, 89}, {97, 109, 93}, {110, 110, 127}, {111, 114, 93}, {115, 115, 128}, {116, 122, 93}, },
            {{45, 57, -21}, {65, 84, 89}, {85, 85, 129}, {86, 90, 89}, {97, 116, 93}, {117, 117, 130}, {118, 122, 93}, },
            {{45, 57, -21}, {65, 68, 89}, {69, 69, 131}, {70, 90, 89}, {97, 100, 93}, {101, 101, 132}, {102, 122, 93}, },
            {{45, 68, -31}, {69, 69, 133}, {70, 78, 89}, {79, 79, 134}, {80, 90, 89}, {97, 100, 93}, {101, 101, 135}, {102, 110, 93}, {111, 111, 136}, {112, 122, 93}, },
            {{45, 57, -21}, {65, 90, 89}, {97, 122, 93}, },
            {{45, 57, -21}, {65, 65, 137}, {66, 84, 89}, {85, 85, 138}, {86, 90, 89}, {97, 97, 139}, {98, 116, 93}, {117, 117, 140}, {118, 122, 93}, },
            {{45, 57, -21}, {65, 65, 89}, {66, 66, 141}, {67, 67, 142}, {68, 77, 89}, {78, 78, 143}, {79, 90, 89}, {97, 97, 93}, {98, 98, 144}, {99, 99, 145}, {100, 109, 93}, {110, 110, 146}, {111, 122, 93}, },
            {{45, 57, -21}, {65, 65, 147}, {66, 72, 89}, {73, 73, 148}, {74, 78, 89}, {79, 79, 149}, {80, 81, 89}, {82, 82, 150}, {83, 90, 89}, {97, 97, 151}, {98, 104, 93}, {105, 105, 152}, {106, 110, 93}, {111, 111, 153}, {112, 113, 93}, {114, 114, 154}, {115, 122, 93}, },
            {{45, 84, -30}, {85, 85, 155}, {86, 116, -30}, {117, 117, 156}, {118, 122, 93}, },
            {{45, 68, -31}, {69, 69, 157}, {70, 72, 89}, {73, 73, 158}, {74, 90, 89}, {97, 100, 93}, {101, 101, 159}, {102, 104, 93}, {105, 105, 160}, {106, 122, 93}, },
            {{45, 68, -31}, {69, 69, 161}, {70, 72, 89}, {73, 73, 162}, {74, 79, 89}, {80, 80, 163}, {81, 88, 89}, {89, 89, 164}, {90, 90, 89}, {97, 100, 93}, {101, 101, 165}, {102, 104, 93}, {105, 105, 166}, {106, 111, 93}, {112, 112, 167}, {113, 120, 93}, {121, 121, 168}, {122, 122, 93}, },
            {{45, 71, -23}, {72, 72, 169}, {73, 73, 170}, {74, 78, 89}, {79, 79, 171}, {80, 81, 89}, {82, 82, 172}, {83, 90, 89}, {97, 103, 93}, {104, 104, 173}, {105, 105, 174}, {106, 110, 93}, {111, 111, 175}, {112, 113, 93}, {114, 114, 176}, {115, 122, 93}, },
            {{45, 57, -21}, {65, 82, 89}, {83, 83, 177}, {84, 90, 89}, {97, 114, 93}, {115, 115, 178}, {116, 122, 93}, },
            {{45, 57, -21}, {65, 65, 179}, {66, 90, 89}, {97, 97, 180}, {98, 122, 93}, },
            {{45, 71, -23}, {72, 72, 181}, {73, 90, 89}, {97, 103, 93}, {104, 104, 182}, {105, 122, 93}, },
            {{45, 68, -31}, {69, 69, 183}, {70, 100, -31}, {101, 101, 184}, {102, 122, 93}, },
            {{45, 122, -21}, },
            {{45, 122, -22}, },
            {{45, 122, -23}, },
            {{45, 122, -24}, },
            {{45, 122, -25}, },
            {{45, 122, -26}, },
            {{45, 122, -27}, },
            {{45, 122, -28}, },
            {{45, 122, -29}, },
            {{45, 122, -30}, },
            {{45, 122, -31}, },
            {{45, 122, -32}, },
            {{45, 122, -33}, },
            {{45, 122, -34}, },
            {{45, 122, -35}, },
            {{45, 122, -36}, },
            {{45, 122, -37}, },
            {{45, 122, -38}, },
            {{45, 122, -39}, },
            {{45, 122, -40}, },
            {{45, 122, -41}, },
            {{45, 122, -42}, },
            {{45, 122, -43}, },
            {{45, 122, -44}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 65535, -8}, },
            {{34, 34, 185}, },
            {{0, 65535, -10}, },
            {{39, 39, 186}, },
            {{0, 65535, -13}, },
            {},
            {{10, 10, 187}, },
            {{48, 57, 81}, },
            {{46, 57, -14}, },
            {{48, 57, 81}, {69, 69, 188}, },
            {{90, 90, 82}, },
            {{46, 122, -19}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{46, 122, -19}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 75, -21}, {76, 76, 189}, {77, 107, -27}, {108, 108, 190}, {109, 122, 93}, },
            {{45, 68, -31}, {69, 69, 191}, {70, 100, -31}, {101, 101, 192}, {102, 122, 93}, },
            {{45, 57, -21}, {65, 66, 89}, {67, 67, 193}, {68, 90, 89}, {97, 98, 93}, {99, 99, 194}, {100, 122, 93}, },
            {{45, 122, -33}, },
            {{45, 122, -92}, },
            {{45, 122, -93}, },
            {{45, 122, -94}, },
            {{45, 77, -29}, {78, 78, 195}, {79, 90, 89}, {97, 109, 93}, {110, 110, 196}, {111, 122, 93}, },
            {{45, 57, -21}, {65, 65, 197}, {66, 90, 89}, {97, 97, 198}, {98, 122, 93}, },
            {{45, 122, -33}, },
            {{45, 122, -99}, },
            {{45, 122, -100}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 199}, {66, 90, 89}, {97, 97, 200}, {98, 122, 93}, },
            {{45, 57, -21}, {65, 76, 89}, {77, 77, 201}, {78, 90, 89}, {97, 108, 93}, {109, 109, 202}, {110, 122, 93}, },
            {{45, 122, -105}, },
            {{45, 122, -106}, },
            {{45, 57, -21}, {65, 83, 89}, {84, 84, 203}, {85, 90, 89}, {97, 115, 93}, {116, 116, 204}, {117, 122, 93}, },
            {{45, 57, -21}, {65, 79, 89}, {80, 80, 205}, {81, 82, 89}, {83, 83, 206}, {84, 90, 89}, {97, 111, 93}, {112, 112, 207}, {113, 114, 93}, {115, 115, 208}, {116, 122, 93}, },
            {{45, 82, -41}, {83, 83, 209}, {84, 114, -41}, {115, 115, 210}, {116, 122, 93}, },
            {{45, 122, -109}, },
            {{45, 122, -110}, },
            {{45, 122, -111}, },
            {{45, 83, -109}, {84, 84, 211}, {85, 115, -109}, {116, 116, 212}, {117, 122, 93}, },
            {{45, 122, -115}, },
            {{45, 75, -21}, {76, 76, 213}, {77, 107, -27}, {108, 108, 214}, {109, 122, 93}, },
            {{45, 57, -21}, {65, 81, 89}, {82, 82, 215}, {83, 90, 89}, {97, 113, 93}, {114, 114, 216}, {115, 122, 93}, },
            {{45, 77, -29}, {78, 78, 217}, {79, 109, -99}, {110, 110, 218}, {111, 122, 93}, },
            {{45, 122, -117}, },
            {{45, 122, -118}, },
            {{45, 122, -119}, },
            {{45, 57, -21}, {65, 78, 89}, {79, 79, 219}, {80, 90, 89}, {97, 110, 93}, {111, 111, 220}, {112, 122, 93}, },
            {{45, 122, -123}, },
            {{45, 57, -21}, {65, 70, 89}, {71, 71, 221}, {72, 90, 89}, {97, 102, 93}, {103, 103, 222}, {104, 122, 93}, },
            {{45, 122, -125}, },
            {{45, 57, -21}, {65, 67, 89}, {68, 68, 223}, {69, 90, 89}, {97, 99, 93}, {100, 100, 224}, {101, 122, 93}, },
            {{45, 122, -33}, },
            {{45, 122, -127}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 225}, {84, 114, -41}, {115, 115, 226}, {116, 122, 93}, },
            {{45, 122, -131}, },
            {{45, 57, -21}, {65, 88, 89}, {89, 89, 227}, {90, 90, 89}, {97, 120, 93}, {121, 121, 228}, {122, 122, 93}, },
            {{45, 122, -133}, },
            {{45, 57, -21}, {65, 65, 229}, {66, 69, 89}, {70, 70, 230}, {71, 90, 89}, {97, 97, 231}, {98, 101, 93}, {102, 102, 232}, {103, 122, 93}, },
            {{45, 57, -21}, {65, 86, 89}, {87, 87, 233}, {88, 90, 89}, {97, 118, 93}, {119, 119, 234}, {120, 122, 93}, },
            {{45, 122, -135}, },
            {{45, 122, -136}, },
            {{45, 83, -109}, {84, 84, 235}, {85, 115, -109}, {116, 116, 236}, {117, 122, 93}, },
            {{45, 75, -21}, {76, 76, 237}, {77, 107, -27}, {108, 108, 238}, {109, 122, 93}, },
            {{45, 122, -139}, },
            {{45, 122, -140}, },
            {{45, 57, -21}, {65, 73, 89}, {74, 74, 239}, {75, 90, 89}, {97, 105, 93}, {106, 106, 240}, {107, 122, 93}, },
            {{45, 66, -94}, {67, 67, 241}, {68, 98, -94}, {99, 99, 242}, {100, 122, 93}, },
            {{45, 122, -33}, },
            {{45, 122, -143}, },
            {{45, 122, -144}, },
            {{45, 122, -33}, },
            {{45, 66, -94}, {67, 67, 243}, {68, 98, -94}, {99, 99, 244}, {100, 122, 93}, },
            {{45, 66, -94}, {67, 67, 245}, {68, 98, -94}, {99, 99, 246}, {100, 122, 93}, },
            {{45, 72, -22}, {73, 73, 247}, {74, 104, -28}, {105, 105, 248}, {106, 122, 93}, },
            {{45, 78, -123}, {79, 79, 249}, {80, 110, -123}, {111, 111, 250}, {112, 122, 93}, },
            {{45, 122, -149}, },
            {{45, 122, -150}, },
            {{45, 122, -151}, },
            {{45, 122, -152}, },
            {{45, 78, -123}, {79, 79, 251}, {80, 110, -123}, {111, 111, 252}, {112, 122, 93}, },
            {{45, 122, -157}, },
            {{45, 67, -127}, {68, 68, 253}, {69, 69, 89}, {70, 70, 254}, {71, 77, 89}, {78, 78, 255}, {79, 90, 89}, {97, 99, 93}, {100, 100, 256}, {101, 101, 93}, {102, 102, 257}, {103, 109, 93}, {110, 110, 258}, {111, 122, 93}, },
            {{45, 70, -125}, {71, 71, 259}, {72, 102, -125}, {103, 103, 260}, {104, 122, 93}, },
            {{45, 122, -159}, },
            {{45, 122, -160}, },
            {{45, 79, -110}, {80, 80, 261}, {81, 90, 89}, {97, 111, 93}, {112, 112, 262}, {113, 122, 93}, },
            {{45, 70, -125}, {71, 71, 263}, {72, 102, -125}, {103, 103, 264}, {104, 122, 93}, },
            {{45, 57, -21}, {65, 65, 265}, {66, 90, 89}, {97, 97, 266}, {98, 122, 93}, },
            {{45, 77, -29}, {78, 78, 267}, {79, 109, -99}, {110, 110, 268}, {111, 122, 93}, },
            {{45, 122, -163}, },
            {{45, 122, -164}, },
            {{45, 122, -165}, },
            {{45, 122, -166}, },
            {{45, 81, -118}, {82, 82, 269}, {83, 113, -118}, {114, 114, 270}, {115, 122, 93}, },
            {{45, 76, -106}, {77, 77, 271}, {78, 108, -106}, {109, 109, 272}, {110, 122, 93}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 273}, {66, 90, 89}, {97, 97, 274}, {98, 122, 93}, },
            {{45, 122, -171}, },
            {{45, 122, -172}, },
            {{45, 122, -33}, },
            {{45, 122, -174}, },
            {{45, 57, -21}, {65, 65, 275}, {66, 90, 89}, {97, 97, 276}, {98, 122, 93}, },
            {{45, 122, -179}, },
            {{45, 75, -21}, {76, 76, 277}, {77, 107, -27}, {108, 108, 278}, {109, 122, 93}, },
            {{45, 122, -181}, },
            {{45, 68, -31}, {69, 69, 279}, {70, 100, -31}, {101, 101, 280}, {102, 122, 93}, },
            {{45, 122, -183}, },
            {{45, 81, -118}, {82, 82, 281}, {83, 113, -118}, {114, 114, 282}, {115, 122, 93}, },
            {{45, 122, -185}, },
            {{0, 65535, -8}, },
            {{0, 65535, -10}, },
            {},
            {{43, 43, 283}, {45, 45, 284}, {48, 57, 285}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 286}, {70, 100, -31}, {101, 101, 287}, {102, 122, 93}, },
            {{45, 122, -195}, },
            {{45, 57, -21}, {65, 65, 288}, {66, 90, 89}, {97, 97, 289}, {98, 122, 93}, },
            {{45, 122, -197}, },
            {{45, 77, -29}, {78, 78, 290}, {79, 109, -99}, {110, 110, 291}, {111, 122, 93}, },
            {{45, 122, -199}, },
            {{45, 81, -118}, {82, 82, 292}, {83, 113, -118}, {114, 114, 293}, {115, 122, 93}, },
            {{45, 122, -201}, },
            {{45, 79, -110}, {80, 80, 294}, {81, 111, -163}, {112, 112, 295}, {113, 122, 93}, },
            {{45, 122, -203}, },
            {{45, 68, -31}, {69, 69, 296}, {70, 100, -31}, {101, 101, 297}, {102, 122, 93}, },
            {{45, 122, -205}, },
            {{45, 68, -31}, {69, 69, 298}, {70, 100, -31}, {101, 101, 299}, {102, 122, 93}, },
            {{45, 66, -94}, {67, 67, 300}, {68, 98, -94}, {99, 99, 301}, {100, 122, 93}, },
            {{45, 122, -207}, },
            {{45, 122, -208}, },
            {{45, 79, -110}, {80, 80, 302}, {81, 111, -163}, {112, 112, 303}, {113, 122, 93}, },
            {{45, 122, -211}, },
            {{45, 68, -31}, {69, 69, 304}, {70, 100, -31}, {101, 101, 305}, {102, 122, 93}, },
            {{45, 122, -213}, },
            {{45, 75, -21}, {76, 76, 306}, {77, 107, -27}, {108, 108, 307}, {109, 122, 93}, },
            {{45, 122, -215}, },
            {{45, 76, -106}, {77, 77, 308}, {78, 108, -106}, {109, 109, 309}, {110, 122, 93}, },
            {{45, 122, -217}, },
            {{45, 66, -94}, {67, 67, 310}, {68, 98, -94}, {99, 99, 311}, {100, 122, 93}, },
            {{45, 122, -219}, },
            {{45, 65, -35}, {66, 66, 312}, {67, 90, 89}, {97, 97, 93}, {98, 98, 313}, {99, 122, 93}, },
            {{45, 122, -221}, },
            {{45, 71, -23}, {72, 72, 314}, {73, 103, -43}, {104, 104, 315}, {105, 122, 93}, },
            {{45, 122, -223}, },
            {{45, 68, -31}, {69, 69, 316}, {70, 100, -31}, {101, 101, 317}, {102, 122, 93}, },
            {{45, 122, -225}, },
            {{45, 83, -109}, {84, 84, 318}, {85, 115, -109}, {116, 116, 319}, {117, 122, 93}, },
            {{45, 122, -227}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 67, -127}, {68, 68, 320}, {69, 99, -127}, {100, 100, 321}, {101, 122, 93}, },
            {{45, 83, -109}, {84, 84, 322}, {85, 115, -109}, {116, 116, 323}, {117, 122, 93}, },
            {{45, 122, -231}, },
            {{45, 122, -232}, },
            {{45, 45, 324}, {48, 122, -33}, },
            {{45, 122, -235}, },
            {{45, 72, -22}, {73, 73, 325}, {74, 104, -28}, {105, 105, 326}, {106, 122, 93}, },
            {{45, 122, -237}, },
            {{45, 75, -21}, {76, 76, 327}, {77, 107, -27}, {108, 108, 328}, {109, 122, 93}, },
            {{45, 122, -239}, },
            {{45, 68, -31}, {69, 69, 329}, {70, 100, -31}, {101, 101, 330}, {102, 122, 93}, },
            {{45, 122, -241}, },
            {{45, 84, -30}, {85, 85, 331}, {86, 116, -30}, {117, 117, 332}, {118, 122, 93}, },
            {{45, 122, -243}, },
            {{45, 57, -21}, {65, 74, 89}, {75, 75, 333}, {76, 90, 89}, {97, 106, 93}, {107, 107, 334}, {108, 122, 93}, },
            {{45, 122, -245}, },
            {{45, 83, -109}, {84, 84, 335}, {85, 115, -109}, {116, 116, 336}, {117, 122, 93}, },
            {{45, 122, -247}, },
            {{45, 77, -29}, {78, 78, 337}, {79, 109, -99}, {110, 110, 338}, {111, 122, 93}, },
            {{45, 122, -249}, },
            {{45, 66, -94}, {67, 67, 339}, {68, 98, -94}, {99, 99, 340}, {100, 122, 93}, },
            {{45, 122, -251}, },
            {{45, 83, -109}, {84, 84, 341}, {85, 115, -109}, {116, 116, 342}, {117, 122, 93}, },
            {{45, 122, -253}, },
            {{45, 68, -31}, {69, 69, 343}, {70, 100, -31}, {101, 101, 344}, {102, 122, 93}, },
            {{45, 68, -31}, {69, 69, 345}, {70, 100, -31}, {101, 101, 346}, {102, 122, 93}, },
            {{45, 57, -21}, {65, 65, 347}, {66, 90, 89}, {97, 97, 348}, {98, 122, 93}, },
            {{45, 122, -255}, },
            {{45, 122, -256}, },
            {{45, 122, -257}, },
            {{45, 71, -23}, {72, 72, 349}, {73, 103, -43}, {104, 104, 350}, {105, 122, 93}, },
            {{45, 122, -261}, },
            {{45, 57, -21}, {65, 65, 351}, {66, 90, 89}, {97, 97, 352}, {98, 122, 93}, },
            {{45, 122, -263}, },
            {{45, 77, -29}, {78, 78, 353}, {79, 109, -99}, {110, 110, 354}, {111, 122, 93}, },
            {{45, 122, -265}, },
            {{45, 66, -94}, {67, 67, 355}, {68, 98, -94}, {99, 99, 356}, {100, 122, 93}, },
            {{45, 122, -267}, },
            {{45, 66, -94}, {67, 67, 357}, {68, 98, -94}, {99, 99, 358}, {100, 122, 93}, },
            {{45, 122, -269}, },
            {{45, 78, -123}, {79, 79, 359}, {80, 84, 89}, {85, 85, 360}, {86, 90, 89}, {97, 110, 93}, {111, 111, 361}, {112, 116, 93}, {117, 117, 362}, {118, 122, 93}, },
            {{45, 122, -271}, },
            {{45, 68, -31}, {69, 69, 363}, {70, 100, -31}, {101, 101, 364}, {102, 122, 93}, },
            {{45, 122, -273}, },
            {{45, 72, -22}, {73, 73, 365}, {74, 104, -28}, {105, 105, 366}, {106, 122, 93}, },
            {{45, 122, -275}, },
            {{45, 70, -125}, {71, 71, 367}, {72, 102, -125}, {103, 103, 368}, {104, 122, 93}, },
            {{45, 122, -277}, },
            {{45, 84, -30}, {85, 85, 369}, {86, 116, -30}, {117, 117, 370}, {118, 122, 93}, },
            {{45, 122, -279}, },
            {{45, 77, -29}, {78, 78, 371}, {79, 109, -99}, {110, 110, 372}, {111, 122, 93}, },
            {{45, 122, -281}, },
            {{45, 78, -123}, {79, 79, 373}, {80, 110, -123}, {111, 111, 374}, {112, 122, 93}, },
            {{45, 122, -283}, },
            {{48, 57, 285}, },
            {{48, 57, 285}, },
            {{48, 57, 285}, },
            {{45, 77, -29}, {78, 78, 375}, {79, 109, -99}, {110, 110, 376}, {111, 122, 93}, },
            {{45, 122, -288}, },
            {{45, 81, -118}, {82, 82, 377}, {83, 113, -118}, {114, 114, 378}, {115, 122, 93}, },
            {{45, 122, -290}, },
            {{45, 74, -245}, {75, 75, 379}, {76, 106, -245}, {107, 107, 380}, {108, 122, 93}, },
            {{45, 122, -292}, },
            {{45, 57, -21}, {65, 65, 381}, {66, 90, 89}, {97, 97, 382}, {98, 122, 93}, },
            {{45, 122, -294}, },
            {{45, 45, 383}, {48, 84, -30}, {85, 85, 384}, {86, 116, -30}, {117, 117, 385}, {118, 122, 93}, },
            {{45, 122, -296}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 386}, {79, 109, -99}, {110, 110, 387}, {111, 122, 93}, },
            {{45, 122, -300}, },
            {{45, 68, -31}, {69, 69, 388}, {70, 100, -31}, {101, 101, 389}, {102, 122, 93}, },
            {{45, 122, -302}, },
            {{45, 75, -21}, {76, 76, 390}, {77, 107, -27}, {108, 108, 391}, {109, 122, 93}, },
            {{45, 122, -304}, },
            {{45, 81, -118}, {82, 82, 392}, {83, 113, -118}, {114, 114, 393}, {115, 122, 93}, },
            {{45, 122, -306}, },
            {{45, 68, -31}, {69, 69, 394}, {70, 100, -31}, {101, 101, 395}, {102, 122, 93}, },
            {{45, 122, -308}, },
            {{45, 57, -21}, {65, 65, 396}, {66, 90, 89}, {97, 97, 397}, {98, 122, 93}, },
            {{45, 122, -310}, },
            {{45, 83, -109}, {84, 84, 398}, {85, 115, -109}, {116, 116, 399}, {117, 122, 93}, },
            {{45, 122, -312}, },
            {{45, 57, -21}, {65, 65, 400}, {66, 90, 89}, {97, 97, 401}, {98, 122, 93}, },
            {{45, 122, -314}, },
            {{45, 45, 402}, {48, 122, -33}, },
            {{45, 122, -316}, },
            {{45, 87, -25}, {88, 88, 403}, {89, 119, -25}, {120, 120, 404}, {121, 122, 93}, },
            {{45, 122, -318}, },
            {{45, 72, -22}, {73, 73, 405}, {74, 104, -28}, {105, 105, 406}, {106, 122, 93}, },
            {{45, 122, -320}, },
            {{45, 72, -22}, {73, 73, 407}, {74, 104, -28}, {105, 105, 408}, {106, 122, 93}, },
            {{45, 122, -322}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 85, 89}, {86, 86, 409}, {87, 90, 89}, {97, 117, 93}, {118, 118, 410}, {119, 122, 93}, },
            {{45, 78, -123}, {79, 79, 411}, {80, 85, 89}, {86, 86, 412}, {87, 90, 89}, {97, 110, 93}, {111, 111, 413}, {112, 117, 93}, {118, 118, 414}, {119, 122, 93}, },
            {{45, 122, -327}, },
            {{45, 82, -41}, {83, 83, 415}, {84, 114, -41}, {115, 115, 416}, {116, 122, 93}, },
            {{45, 122, -329}, },
            {{45, 66, -94}, {67, 67, 417}, {68, 98, -94}, {99, 99, 418}, {100, 122, 93}, },
            {{45, 122, -331}, },
            {{45, 81, -118}, {82, 82, 419}, {83, 113, -118}, {114, 114, 420}, {115, 122, 93}, },
            {{45, 122, -333}, },
            {{45, 68, -31}, {69, 69, 421}, {70, 100, -31}, {101, 101, 422}, {102, 122, 93}, },
            {{45, 122, -335}, },
            {{45, 84, -30}, {85, 85, 423}, {86, 116, -30}, {117, 117, 424}, {118, 122, 93}, },
            {{45, 122, -337}, },
            {{45, 83, -109}, {84, 84, 425}, {85, 115, -109}, {116, 116, 426}, {117, 122, 93}, },
            {{45, 122, -339}, },
            {{45, 68, -31}, {69, 69, 427}, {70, 100, -31}, {101, 101, 428}, {102, 122, 93}, },
            {{45, 122, -341}, },
            {{45, 68, -31}, {69, 69, 429}, {70, 100, -31}, {101, 101, 430}, {102, 122, 93}, },
            {{45, 122, -343}, },
            {{45, 57, -21}, {65, 69, 89}, {70, 70, 431}, {71, 90, 89}, {97, 101, 93}, {102, 102, 432}, {103, 122, 93}, },
            {{45, 122, -345}, },
            {{45, 81, -118}, {82, 82, 433}, {83, 113, -118}, {114, 114, 434}, {115, 122, 93}, },
            {{45, 122, -347}, },
            {{45, 76, -106}, {77, 77, 435}, {78, 108, -106}, {109, 109, 436}, {110, 122, 93}, },
            {{45, 122, -349}, },
            {{45, 83, -109}, {84, 84, 437}, {85, 115, -109}, {116, 116, 438}, {117, 122, 93}, },
            {{45, 122, -351}, },
            {{45, 81, -118}, {82, 82, 439}, {83, 113, -118}, {114, 114, 440}, {115, 122, 93}, },
            {{45, 122, -353}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 441}, {70, 100, -31}, {101, 101, 442}, {102, 122, 93}, },
            {{45, 122, -357}, },
            {{45, 71, -23}, {72, 72, 443}, {73, 103, -43}, {104, 104, 444}, {105, 122, 93}, },
            {{45, 122, -359}, },
            {{45, 84, -30}, {85, 85, 445}, {86, 116, -30}, {117, 117, 446}, {118, 122, 93}, },
            {{45, 122, -33}, },
            {{45, 122, -361}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 447}, {84, 114, -41}, {115, 115, 448}, {116, 122, 93}, },
            {{45, 122, -365}, },
            {{45, 75, -21}, {76, 76, 449}, {77, 107, -27}, {108, 108, 450}, {109, 122, 93}, },
            {{45, 122, -367}, },
            {{45, 68, -31}, {69, 69, 451}, {70, 100, -31}, {101, 101, 452}, {102, 122, 93}, },
            {{45, 122, -369}, },
            {{45, 68, -31}, {69, 69, 453}, {70, 100, -31}, {101, 101, 454}, {102, 122, 93}, },
            {{45, 122, -371}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 455}, {70, 82, 89}, {83, 83, 456}, {84, 90, 89}, {97, 100, 93}, {101, 101, 457}, {102, 114, 93}, {115, 115, 458}, {116, 122, 93}, },
            {{45, 122, -375}, },
            {{45, 67, -127}, {68, 68, 459}, {69, 99, -127}, {100, 100, 460}, {101, 122, 93}, },
            {{45, 122, -377}, },
            {{45, 88, -133}, {89, 89, 461}, {90, 120, -133}, {121, 121, 462}, {122, 122, 93}, },
            {{45, 122, -379}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 66, -94}, {67, 67, 463}, {68, 98, -94}, {99, 99, 464}, {100, 122, 93}, },
            {{45, 122, -383}, },
            {{45, 45, 87}, {48, 48, 88}, {49, 49, 465}, {50, 50, 466}, {51, 51, 467}, {52, 52, 468}, {53, 53, 469}, {54, 57, 88}, {65, 122, -33}, },
            {{45, 83, -109}, {84, 84, 470}, {85, 115, -109}, {116, 116, 471}, {117, 122, 93}, },
            {{45, 122, -386}, },
            {{45, 67, -127}, {68, 68, 472}, {69, 99, -127}, {100, 100, 473}, {101, 122, 93}, },
            {{45, 122, -388}, },
            {{45, 77, -29}, {78, 78, 474}, {79, 109, -99}, {110, 110, 475}, {111, 122, 93}, },
            {{45, 122, -390}, },
            {{45, 57, -21}, {65, 65, 476}, {66, 90, 89}, {97, 97, 477}, {98, 122, 93}, },
            {{45, 122, -392}, },
            {{45, 77, -29}, {78, 78, 478}, {79, 109, -99}, {110, 110, 479}, {111, 122, 93}, },
            {{45, 122, -394}, },
            {{45, 81, -118}, {82, 82, 480}, {83, 113, -118}, {114, 114, 481}, {115, 122, 93}, },
            {{45, 122, -396}, },
            {{45, 83, -109}, {84, 84, 482}, {85, 115, -109}, {116, 116, 483}, {117, 122, 93}, },
            {{45, 122, -398}, },
            {{45, 72, -22}, {73, 73, 484}, {74, 104, -28}, {105, 105, 485}, {106, 122, 93}, },
            {{45, 122, -400}, },
            {{45, 75, -21}, {76, 76, 486}, {77, 107, -27}, {108, 108, 487}, {109, 122, 93}, },
            {{45, 122, -402}, },
            {{45, 85, -326}, {86, 86, 488}, {87, 117, -326}, {118, 118, 489}, {119, 122, 93}, },
            {{45, 68, -31}, {69, 69, 490}, {70, 100, -31}, {101, 101, 491}, {102, 122, 93}, },
            {{45, 122, -405}, },
            {{45, 69, -345}, {70, 70, 492}, {71, 101, -345}, {102, 102, 493}, {103, 122, 93}, },
            {{45, 122, -407}, },
            {{45, 77, -29}, {78, 78, 494}, {79, 109, -99}, {110, 110, 495}, {111, 122, 93}, },
            {{45, 122, -409}, },
            {{45, 57, -21}, {65, 65, 496}, {66, 90, 89}, {97, 97, 497}, {98, 122, 93}, },
            {{45, 122, -411}, },
            {{45, 77, -29}, {78, 78, 498}, {79, 109, -99}, {110, 110, 499}, {111, 122, 93}, },
            {{45, 68, -31}, {69, 69, 500}, {70, 100, -31}, {101, 101, 501}, {102, 122, 93}, },
            {{45, 122, -413}, },
            {{45, 122, -414}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -109}, {84, 84, 502}, {85, 115, -109}, {116, 116, 503}, {117, 122, 93}, },
            {{45, 122, -419}, },
            {{45, 82, -41}, {83, 83, 504}, {84, 114, -41}, {115, 115, 505}, {116, 122, 93}, },
            {{45, 122, -421}, },
            {{45, 67, -127}, {68, 68, 506}, {69, 99, -127}, {100, 100, 507}, {101, 122, 93}, },
            {{45, 122, -423}, },
            {{45, 81, -118}, {82, 82, 508}, {83, 113, -118}, {114, 114, 509}, {115, 122, 93}, },
            {{45, 122, -425}, },
            {{45, 68, -31}, {69, 69, 510}, {70, 100, -31}, {101, 101, 511}, {102, 122, 93}, },
            {{45, 122, -427}, },
            {{45, 67, -127}, {68, 68, 512}, {69, 99, -127}, {100, 100, 513}, {101, 122, 93}, },
            {{45, 122, -429}, },
            {{45, 82, -41}, {83, 83, 514}, {84, 114, -41}, {115, 115, 515}, {116, 122, 93}, },
            {{45, 122, -431}, },
            {{45, 72, -22}, {73, 73, 516}, {74, 104, -28}, {105, 105, 517}, {106, 122, 93}, },
            {{45, 122, -433}, },
            {{45, 68, -31}, {69, 69, 518}, {70, 100, -31}, {101, 101, 519}, {102, 122, 93}, },
            {{45, 122, -435}, },
            {{45, 68, -31}, {69, 69, 520}, {70, 100, -31}, {101, 101, 521}, {102, 122, 93}, },
            {{45, 122, -437}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 522}, {66, 90, 89}, {97, 97, 523}, {98, 122, 93}, },
            {{45, 122, -441}, },
            {{45, 82, -41}, {83, 83, 524}, {84, 114, -41}, {115, 115, 525}, {116, 122, 93}, },
            {{45, 122, -443}, },
            {{45, 81, -118}, {82, 82, 526}, {83, 113, -118}, {114, 114, 527}, {115, 122, 93}, },
            {{45, 122, -445}, },
            {{45, 70, -125}, {71, 71, 528}, {72, 102, -125}, {103, 103, 529}, {104, 122, 93}, },
            {{45, 122, -447}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 530}, {74, 104, -28}, {105, 105, 531}, {106, 122, 93}, },
            {{45, 122, -451}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 532}, {84, 114, -41}, {115, 115, 533}, {116, 122, 93}, },
            {{45, 122, -455}, },
            {{45, 82, -41}, {83, 83, 534}, {84, 114, -41}, {115, 115, 535}, {116, 122, 93}, },
            {{45, 122, -33}, },
            {{45, 122, -457}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 536}, {74, 104, -28}, {105, 105, 537}, {106, 122, 93}, },
            {{45, 122, -461}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -109}, {84, 84, 538}, {85, 115, -109}, {116, 116, 539}, {117, 122, 93}, },
            {{45, 122, -465}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 540}, {66, 90, 89}, {97, 97, 541}, {98, 122, 93}, },
            {{45, 122, -472}, },
            {{45, 72, -22}, {73, 73, 542}, {74, 104, -28}, {105, 105, 543}, {106, 122, 93}, },
            {{45, 122, -474}, },
            {{45, 67, -127}, {68, 68, 544}, {69, 99, -127}, {100, 100, 545}, {101, 122, 93}, },
            {{45, 122, -476}, },
            {{45, 88, -133}, {89, 89, 546}, {90, 120, -133}, {121, 121, 547}, {122, 122, 93}, },
            {{45, 122, -478}, },
            {{45, 57, -21}, {65, 65, 548}, {66, 90, 89}, {97, 97, 549}, {98, 122, 93}, },
            {{45, 122, -480}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -123}, {79, 79, 550}, {80, 110, -123}, {111, 111, 551}, {112, 122, 93}, },
            {{45, 122, -486}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 552}, {66, 90, 89}, {97, 97, 553}, {98, 122, 93}, },
            {{45, 122, -490}, },
            {{45, 67, -127}, {68, 68, 554}, {69, 99, -127}, {100, 100, 555}, {101, 122, 93}, },
            {{45, 122, -492}, },
            {{45, 72, -22}, {73, 73, 556}, {74, 104, -28}, {105, 105, 557}, {106, 122, 93}, },
            {{45, 122, -494}, },
            {{45, 70, -125}, {71, 71, 558}, {72, 102, -125}, {103, 103, 559}, {104, 122, 93}, },
            {{45, 122, -496}, },
            {{45, 75, -21}, {76, 76, 560}, {77, 107, -27}, {108, 108, 561}, {109, 122, 93}, },
            {{45, 122, -498}, },
            {{45, 57, -21}, {65, 65, 562}, {66, 90, 89}, {97, 97, 563}, {98, 122, 93}, },
            {{45, 122, -500}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 564}, {48, 122, -33}, },
            {{45, 122, -508}, },
            {{45, 68, -31}, {69, 69, 565}, {70, 100, -31}, {101, 101, 566}, {102, 122, 93}, },
            {{45, 122, -510}, },
            {{45, 81, -118}, {82, 82, 567}, {83, 113, -118}, {114, 114, 568}, {115, 122, 93}, },
            {{45, 122, -512}, },
            {{45, 84, -30}, {85, 85, 569}, {86, 116, -30}, {117, 117, 570}, {118, 122, 93}, },
            {{45, 122, -514}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 571}, {79, 109, -99}, {110, 110, 572}, {111, 122, 93}, },
            {{45, 122, -518}, },
            {{45, 77, -29}, {78, 78, 573}, {79, 109, -99}, {110, 110, 574}, {111, 122, 93}, },
            {{45, 122, -520}, },
            {{45, 82, -41}, {83, 83, 575}, {84, 114, -41}, {115, 115, 576}, {116, 122, 93}, },
            {{45, 122, -522}, },
            {{45, 83, -109}, {84, 84, 577}, {85, 115, -109}, {116, 116, 578}, {117, 122, 93}, },
            {{45, 122, -524}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -123}, {79, 79, 579}, {80, 110, -123}, {111, 111, 580}, {112, 122, 93}, },
            {{45, 122, -528}, },
            {{45, 71, -23}, {72, 72, 581}, {73, 103, -43}, {104, 104, 582}, {105, 122, 93}, },
            {{45, 122, -530}, },
            {{45, 77, -29}, {78, 78, 583}, {79, 109, -99}, {110, 110, 584}, {111, 122, 93}, },
            {{45, 122, -532}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 585}, {79, 109, -99}, {110, 110, 586}, {111, 122, 93}, },
            {{45, 122, -538}, },
            {{45, 68, -31}, {69, 69, 587}, {70, 100, -31}, {101, 101, 588}, {102, 122, 93}, },
            {{45, 122, -540}, },
            {{45, 83, -109}, {84, 84, 589}, {85, 115, -109}, {116, 116, 590}, {117, 122, 93}, },
            {{45, 122, -542}, },
            {{45, 77, -29}, {78, 78, 591}, {79, 109, -99}, {110, 110, 592}, {111, 122, 93}, },
            {{45, 122, -544}, },
            {{45, 72, -22}, {73, 73, 593}, {74, 104, -28}, {105, 105, 594}, {106, 122, 93}, },
            {{45, 122, -546}, },
            {{45, 45, 595}, {48, 122, -33}, },
            {{45, 122, -548}, },
            {{45, 75, -21}, {76, 76, 596}, {77, 107, -27}, {108, 108, 597}, {109, 122, 93}, },
            {{45, 122, -550}, },
            {{45, 77, -29}, {78, 78, 598}, {79, 109, -99}, {110, 110, 599}, {111, 122, 93}, },
            {{45, 122, -552}, },
            {{45, 75, -21}, {76, 76, 600}, {77, 107, -27}, {108, 108, 601}, {109, 122, 93}, },
            {{45, 122, -554}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 602}, {70, 100, -31}, {101, 101, 603}, {102, 122, 93}, },
            {{45, 122, -558}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 84, -30}, {85, 85, 604}, {86, 116, -30}, {117, 117, 605}, {118, 122, 93}, },
            {{45, 122, -562}, },
            {{45, 75, -21}, {76, 76, 606}, {77, 107, -27}, {108, 108, 607}, {109, 122, 93}, },
            {{45, 122, -564}, },
            {{45, 67, -127}, {68, 68, 608}, {69, 99, -127}, {100, 100, 609}, {101, 122, 93}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -118}, {82, 82, 610}, {83, 113, -118}, {114, 114, 611}, {115, 122, 93}, },
            {{45, 122, -571}, },
            {{45, 68, -31}, {69, 69, 612}, {70, 100, -31}, {101, 101, 613}, {102, 122, 93}, },
            {{45, 122, -573}, },
            {{45, 66, -94}, {67, 67, 614}, {68, 98, -94}, {99, 99, 615}, {100, 122, 93}, },
            {{45, 122, -575}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 616}, {70, 100, -31}, {101, 101, 617}, {102, 122, 93}, },
            {{45, 122, -579}, },
            {{45, 77, -29}, {78, 78, 618}, {79, 109, -99}, {110, 110, 619}, {111, 122, 93}, },
            {{45, 122, -581}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 70, -125}, {71, 71, 620}, {72, 102, -125}, {103, 103, 621}, {104, 122, 93}, },
            {{45, 122, -585}, },
            {{45, 70, -125}, {71, 71, 622}, {72, 102, -125}, {103, 103, 623}, {104, 122, 93}, },
            {{45, 122, -587}, },
            {{45, 81, -118}, {82, 82, 624}, {83, 113, -118}, {114, 114, 625}, {115, 122, 93}, },
            {{45, 122, -589}, },
            {{45, 72, -22}, {73, 73, 626}, {74, 104, -28}, {105, 105, 627}, {106, 122, 93}, },
            {{45, 122, -591}, },
            {{45, 70, -125}, {71, 71, 628}, {72, 102, -125}, {103, 103, 629}, {104, 122, 93}, },
            {{45, 122, -593}, },
            {{45, 77, -29}, {78, 78, 630}, {79, 109, -99}, {110, 110, 631}, {111, 122, 93}, },
            {{45, 122, -595}, },
            {{45, 48, -385}, {49, 49, 632}, {50, 57, 88}, {65, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 633}, {48, 122, -33}, },
            {{45, 122, -600}, },
            {{45, 84, -30}, {85, 85, 634}, {86, 116, -30}, {117, 117, 635}, {118, 122, 93}, },
            {{45, 122, -602}, },
            {{45, 67, -127}, {68, 68, 636}, {69, 99, -127}, {100, 100, 637}, {101, 122, 93}, },
            {{45, 122, -604}, },
            {{45, 68, -31}, {69, 69, 638}, {70, 100, -31}, {101, 101, 639}, {102, 122, 93}, },
            {{45, 122, -606}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 640}, {70, 100, -31}, {101, 101, 641}, {102, 122, 93}, },
            {{45, 122, -610}, },
            {{45, 68, -31}, {69, 69, 642}, {70, 100, -31}, {101, 101, 643}, {102, 122, 93}, },
            {{45, 122, -612}, },
            {{45, 82, -41}, {83, 83, 644}, {84, 114, -41}, {115, 115, 645}, {116, 122, 93}, },
            {{45, 122, -614}, },
            {{45, 68, -31}, {69, 69, 646}, {70, 100, -31}, {101, 101, 647}, {102, 122, 93}, },
            {{45, 122, -616}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 648}, {74, 104, -28}, {105, 105, 649}, {106, 122, 93}, },
            {{45, 122, -620}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -123}, {79, 79, 650}, {80, 110, -123}, {111, 111, 651}, {112, 122, 93}, },
            {{45, 122, -628}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 70, -125}, {71, 71, 652}, {72, 102, -125}, {103, 103, 653}, {104, 122, 93}, },
            {{45, 122, -632}, },
            {{45, 122, -33}, },
            {{45, 79, -110}, {80, 80, 654}, {81, 111, -163}, {112, 112, 655}, {113, 122, 93}, },
            {{45, 68, -31}, {69, 69, 656}, {70, 100, -31}, {101, 101, 657}, {102, 122, 93}, },
            {{45, 122, -636}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 658}, {84, 114, -41}, {115, 115, 659}, {116, 122, 93}, },
            {{45, 122, -640}, },
            {{45, 66, -94}, {67, 67, 660}, {68, 98, -94}, {99, 99, 661}, {100, 122, 93}, },
            {{45, 122, -642}, },
            {{45, 45, 662}, {48, 122, -33}, },
            {{45, 122, -644}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 89, 89}, {90, 90, 663}, {97, 121, 93}, {122, 122, 664}, },
            {{45, 122, -650}, },
            {{45, 77, -29}, {78, 78, 665}, {79, 109, -99}, {110, 110, 666}, {111, 122, 93}, },
            {{45, 122, -652}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -123}, {79, 79, 667}, {80, 110, -123}, {111, 111, 668}, {112, 122, 93}, },
            {{45, 122, -656}, },
            {{45, 82, -41}, {83, 83, 669}, {84, 114, -41}, {115, 115, 670}, {116, 122, 93}, },
            {{45, 122, -658}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 671}, {74, 104, -28}, {105, 105, 672}, {106, 122, 93}, },
            {{45, 122, -662}, },
            {{45, 79, -110}, {80, 80, 673}, {81, 111, -163}, {112, 112, 674}, {113, 122, 93}, },
            {{45, 68, -31}, {69, 69, 675}, {70, 100, -31}, {101, 101, 676}, {102, 122, 93}, },
            {{45, 122, -665}, },
            {{45, 57, -21}, {65, 65, 677}, {66, 90, 89}, {97, 97, 678}, {98, 122, 93}, },
            {{45, 122, -667}, },
            {{45, 72, -22}, {73, 73, 679}, {74, 104, -28}, {105, 105, 680}, {106, 122, 93}, },
            {{45, 122, -669}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 76, -106}, {77, 77, 681}, {78, 108, -106}, {109, 109, 682}, {110, 122, 93}, },
            {{45, 122, -673}, },
            {{45, 78, -123}, {79, 79, 683}, {80, 110, -123}, {111, 111, 684}, {112, 122, 93}, },
            {{45, 122, -675}, },
            {{45, 67, -127}, {68, 68, 685}, {69, 99, -127}, {100, 100, 686}, {101, 122, 93}, },
            {{45, 122, -677}, },
            {{45, 75, -21}, {76, 76, 687}, {77, 107, -27}, {108, 108, 688}, {109, 122, 93}, },
            {{45, 122, -679}, },
            {{45, 77, -29}, {78, 78, 689}, {79, 109, -99}, {110, 110, 690}, {111, 122, 93}, },
            {{45, 122, -681}, },
            {{45, 57, -21}, {65, 65, 691}, {66, 90, 89}, {97, 97, 692}, {98, 122, 93}, },
            {{45, 122, -683}, },
            {{45, 72, -22}, {73, 73, 693}, {74, 104, -28}, {105, 105, 694}, {106, 122, 93}, },
            {{45, 122, -685}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 695}, {48, 122, -33}, },
            {{45, 122, -689}, },
            {{45, 83, -109}, {84, 84, 696}, {85, 115, -109}, {116, 116, 697}, {117, 122, 93}, },
            {{45, 122, -691}, },
            {{45, 75, -21}, {76, 76, 698}, {77, 107, -27}, {108, 108, 699}, {109, 122, 93}, },
            {{45, 122, -693}, },
            {{45, 77, -29}, {78, 78, 700}, {79, 109, -99}, {110, 110, 701}, {111, 122, 93}, },
            {{45, 122, -695}, },
            {{45, 48, -385}, {49, 49, 702}, {50, 50, 703}, {51, 51, 704}, {52, 52, 705}, {53, 53, 706}, {54, 122, -385}, },
            {{45, 68, -31}, {69, 69, 707}, {70, 100, -31}, {101, 101, 708}, {102, 122, 93}, },
            {{45, 122, -698}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -109}, {84, 84, 709}, {85, 115, -109}, {116, 116, 710}, {117, 122, 93}, },
            {{45, 122, -702}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -118}, {82, 82, 711}, {83, 113, -118}, {114, 114, 712}, {115, 122, 93}, },
            {{45, 122, -709}, },
            {{45, 68, -31}, {69, 69, 713}, {70, 100, -31}, {101, 101, 714}, {102, 122, 93}, },
            {{45, 122, -711}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -118}, {82, 82, 715}, {83, 113, -118}, {114, 114, 716}, {115, 122, 93}, },
            {{45, 122, -715}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {14, 77, 0, 0, 0, 0, 77, 8, 77, 9, 10, 7, 5, 3, 6, 2, 4, 12, 12, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 0, 0, 0, 0, 0, -1, 13, -1, 13, -1, 1, 1, -1, 14, 14, 15, 12, 76, 76, 11, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 21, 76, 76, 21, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 42, 76, 42, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 53, 76, 76, 53, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 69, 76, 76, 76, 69, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, -1, 1, -1, 16, 16, 17, 17, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 44, 44, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 55, 55, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, -1, -1, 14, 76, 76, 76, 76, 76, 76, 76, 76, 23, 23, 29, 29, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 43, 43, 76, 76, 46, 46, 76, 76, 76, 50, 50, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 64, 64, 76, 76, 66, 66, 76, 67, 76, 67, 76, 76, 76, 76, 76, 76, 76, 76, 74, 74, 75, 75, 76, 76, 76, 76, 20, 20, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 40, 40, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 50, 50, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 58, 58, 76, 76, 76, 76, 76, 76, 62, 62, 76, 76, 65, 65, 76, 76, 76, 76, 68, 68, 76, 76, 71, 71, 72, 72, 76, 75, 76, 75, 76, 76, 19, 19, 76, 76, 24, 25, 26, 27, 28, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 35, 35, 36, 36, 76, 76, 38, 38, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 49, 49, 51, 51, 52, 52, 76, 76, 76, 76, 76, 76, 76, 76, 58, 58, 76, 76, 76, 76, 76, 76, 76, 76, 65, 65, 76, 76, 76, 76, 76, 76, 73, 73, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 32, 32, 76, 76, 76, 76, 76, 76, 41, 41, 76, 76, 45, 45, 76, 76, 76, 76, 76, 55, 55, 56, 56, 76, 76, 76, 76, 76, 76, 61, 61, 76, 76, 76, 76, 67, 67, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 34, 34, 76, 76, 76, 76, 76, 76, 76, 76, 48, 48, 76, 76, 76, 76, 76, 76, 76, 76, 63, 63, 76, 76, 70, 70, 18, 18, 22, 22, 76, 76, 30, 30, 76, 76, 33, 76, 76, 76, 43, 43, 47, 47, 76, 76, 76, 76, 59, 59, 60, 60, 76, 76, 76, 76, 31, 31, 76, 76, 39, 39, 47, 47, 76, 76, 76, 76, 76, 76, 76, 76, 76, 39, 39, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 66, 66, 23, 23, 76, 76, 76, 76, 76, 76, 76, 76, 76, 54, 54, 76, 76, 24, 25, 26, 27, 28, 76, 76, 76, 76, 37, 37, 76, 76, 57, 57, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
