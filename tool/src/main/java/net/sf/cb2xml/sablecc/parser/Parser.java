/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.cb2xml.sablecc.parser;

import net.sf.cb2xml.sablecc.lexer.*;
import net.sf.cb2xml.sablecc.node.*;
import net.sf.cb2xml.sablecc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(1), node, true); } break;
                    case 2: { Node node = new2(); push(goTo(1), node, true); } break;
                    case 3: { Node node = new3(); push(goTo(2), node, true); } break;
                    case 4: { Node node = new4(); push(goTo(2), node, true); } break;
                    case 5: { Node node = new5(); push(goTo(2), node, true); } break;
                    case 6: { Node node = new6(); push(goTo(3), node, true); } break;
                    case 7: { Node node = new7(); push(goTo(3), node, true); } break;
                    case 8: { Node node = new8(); push(goTo(3), node, true); } break;
                    case 9: { Node node = new9(); push(goTo(3), node, true); } break;
                    case 10: { Node node = new10(); push(goTo(3), node, true); } break;
                    case 11: { Node node = new11(); push(goTo(3), node, true); } break;
                    case 12: { Node node = new12(); push(goTo(3), node, true); } break;
                    case 13: { Node node = new13(); push(goTo(3), node, true); } break;
                    case 14: { Node node = new14(); push(goTo(4), node, true); } break;
                    case 15: { Node node = new15(); push(goTo(4), node, true); } break;
                    case 16: { Node node = new16(); push(goTo(5), node, true); } break;
                    case 17: { Node node = new17(); push(goTo(6), node, true); } break;
                    case 18: { Node node = new18(); push(goTo(6), node, true); } break;
                    case 19: { Node node = new19(); push(goTo(7), node, true); } break;
                    case 20: { Node node = new20(); push(goTo(7), node, true); } break;
                    case 21: { Node node = new21(); push(goTo(7), node, true); } break;
                    case 22: { Node node = new22(); push(goTo(7), node, true); } break;
                    case 23: { Node node = new23(); push(goTo(7), node, true); } break;
                    case 24: { Node node = new24(); push(goTo(7), node, true); } break;
                    case 25: { Node node = new25(); push(goTo(7), node, true); } break;
                    case 26: { Node node = new26(); push(goTo(7), node, true); } break;
                    case 27: { Node node = new27(); push(goTo(7), node, true); } break;
                    case 28: { Node node = new28(); push(goTo(7), node, true); } break;
                    case 29: { Node node = new29(); push(goTo(7), node, true); } break;
                    case 30: { Node node = new30(); push(goTo(8), node, true); } break;
                    case 31: { Node node = new31(); push(goTo(8), node, true); } break;
                    case 32: { Node node = new32(); push(goTo(9), node, true); } break;
                    case 33: { Node node = new33(); push(goTo(9), node, true); } break;
                    case 34: { Node node = new34(); push(goTo(10), node, true); } break;
                    case 35: { Node node = new35(); push(goTo(11), node, true); } break;
                    case 36: { Node node = new36(); push(goTo(12), node, true); } break;
                    case 37: { Node node = new37(); push(goTo(12), node, true); } break;
                    case 38: { Node node = new38(); push(goTo(13), node, true); } break;
                    case 39: { Node node = new39(); push(goTo(13), node, true); } break;
                    case 40: { Node node = new40(); push(goTo(41), node, false); } break;
                    case 41: { Node node = new41(); push(goTo(41), node, false); } break;
                    case 42: { Node node = new42(); push(goTo(13), node, true); } break;
                    case 43: { Node node = new43(); push(goTo(42), node, false); } break;
                    case 44: { Node node = new44(); push(goTo(42), node, false); } break;
                    case 45: { Node node = new45(); push(goTo(13), node, true); } break;
                    case 46: { Node node = new46(); push(goTo(14), node, true); } break;
                    case 47: { Node node = new47(); push(goTo(14), node, true); } break;
                    case 48: { Node node = new48(); push(goTo(14), node, true); } break;
                    case 49: { Node node = new49(); push(goTo(14), node, true); } break;
                    case 50: { Node node = new50(); push(goTo(14), node, true); } break;
                    case 51: { Node node = new51(); push(goTo(14), node, true); } break;
                    case 52: { Node node = new52(); push(goTo(14), node, true); } break;
                    case 53: { Node node = new53(); push(goTo(14), node, true); } break;
                    case 54: { Node node = new54(); push(goTo(14), node, true); } break;
                    case 55: { Node node = new55(); push(goTo(14), node, true); } break;
                    case 56: { Node node = new56(); push(goTo(15), node, true); } break;
                    case 57: { Node node = new57(); push(goTo(16), node, true); } break;
                    case 58: { Node node = new58(); push(goTo(43), node, false); } break;
                    case 59: { Node node = new59(); push(goTo(43), node, false); } break;
                    case 60: { Node node = new60(); push(goTo(16), node, true); } break;
                    case 61: { Node node = new61(); push(goTo(16), node, true); } break;
                    case 62: { Node node = new62(); push(goTo(16), node, true); } break;
                    case 63: { Node node = new63(); push(goTo(17), node, true); } break;
                    case 64: { Node node = new64(); push(goTo(17), node, true); } break;
                    case 65: { Node node = new65(); push(goTo(18), node, true); } break;
                    case 66: { Node node = new66(); push(goTo(18), node, true); } break;
                    case 67: { Node node = new67(); push(goTo(19), node, true); } break;
                    case 68: { Node node = new68(); push(goTo(19), node, true); } break;
                    case 69: { Node node = new69(); push(goTo(20), node, true); } break;
                    case 70: { Node node = new70(); push(goTo(20), node, true); } break;
                    case 71: { Node node = new71(); push(goTo(20), node, true); } break;
                    case 72: { Node node = new72(); push(goTo(20), node, true); } break;
                    case 73: { Node node = new73(); push(goTo(21), node, true); } break;
                    case 74: { Node node = new74(); push(goTo(21), node, true); } break;
                    case 75: { Node node = new75(); push(goTo(22), node, true); } break;
                    case 76: { Node node = new76(); push(goTo(22), node, true); } break;
                    case 77: { Node node = new77(); push(goTo(23), node, true); } break;
                    case 78: { Node node = new78(); push(goTo(23), node, true); } break;
                    case 79: { Node node = new79(); push(goTo(24), node, true); } break;
                    case 80: { Node node = new80(); push(goTo(24), node, true); } break;
                    case 81: { Node node = new81(); push(goTo(25), node, true); } break;
                    case 82: { Node node = new82(); push(goTo(25), node, true); } break;
                    case 83: { Node node = new83(); push(goTo(26), node, true); } break;
                    case 84: { Node node = new84(); push(goTo(26), node, true); } break;
                    case 85: { Node node = new85(); push(goTo(27), node, true); } break;
                    case 86: { Node node = new86(); push(goTo(27), node, true); } break;
                    case 87: { Node node = new87(); push(goTo(28), node, true); } break;
                    case 88: { Node node = new88(); push(goTo(28), node, true); } break;
                    case 89: { Node node = new89(); push(goTo(28), node, true); } break;
                    case 90: { Node node = new90(); push(goTo(28), node, true); } break;
                    case 91: { Node node = new91(); push(goTo(28), node, true); } break;
                    case 92: { Node node = new92(); push(goTo(28), node, true); } break;
                    case 93: { Node node = new93(); push(goTo(28), node, true); } break;
                    case 94: { Node node = new94(); push(goTo(28), node, true); } break;
                    case 95: { Node node = new95(); push(goTo(28), node, true); } break;
                    case 96: { Node node = new96(); push(goTo(28), node, true); } break;
                    case 97: { Node node = new97(); push(goTo(28), node, true); } break;
                    case 98: { Node node = new98(); push(goTo(28), node, true); } break;
                    case 99: { Node node = new99(); push(goTo(28), node, true); } break;
                    case 100: { Node node = new100(); push(goTo(28), node, true); } break;
                    case 101: { Node node = new101(); push(goTo(28), node, true); } break;
                    case 102: { Node node = new102(); push(goTo(28), node, true); } break;
                    case 103: { Node node = new103(); push(goTo(28), node, true); } break;
                    case 104: { Node node = new104(); push(goTo(28), node, true); } break;
                    case 105: { Node node = new105(); push(goTo(28), node, true); } break;
                    case 106: { Node node = new106(); push(goTo(28), node, true); } break;
                    case 107: { Node node = new107(); push(goTo(28), node, true); } break;
                    case 108: { Node node = new108(); push(goTo(28), node, true); } break;
                    case 109: { Node node = new109(); push(goTo(29), node, true); } break;
                    case 110: { Node node = new110(); push(goTo(29), node, true); } break;
                    case 111: { Node node = new111(); push(goTo(30), node, true); } break;
                    case 112: { Node node = new112(); push(goTo(30), node, true); } break;
                    case 113: { Node node = new113(); push(goTo(31), node, true); } break;
                    case 114: { Node node = new114(); push(goTo(32), node, true); } break;
                    case 115: { Node node = new115(); push(goTo(32), node, true); } break;
                    case 116: { Node node = new116(); push(goTo(32), node, true); } break;
                    case 117: { Node node = new117(); push(goTo(32), node, true); } break;
                    case 118: { Node node = new118(); push(goTo(33), node, true); } break;
                    case 119: { Node node = new119(); push(goTo(34), node, true); } break;
                    case 120: { Node node = new120(); push(goTo(34), node, true); } break;
                    case 121: { Node node = new121(); push(goTo(34), node, true); } break;
                    case 122: { Node node = new122(); push(goTo(34), node, true); } break;
                    case 123: { Node node = new123(); push(goTo(35), node, true); } break;
                    case 124: { Node node = new124(); push(goTo(35), node, true); } break;
                    case 125: { Node node = new125(); push(goTo(35), node, true); } break;
                    case 126: { Node node = new126(); push(goTo(35), node, true); } break;
                    case 127: { Node node = new127(); push(goTo(35), node, true); } break;
                    case 128: { Node node = new128(); push(goTo(35), node, true); } break;
                    case 129: { Node node = new129(); push(goTo(35), node, true); } break;
                    case 130: { Node node = new130(); push(goTo(36), node, true); } break;
                    case 131: { Node node = new131(); push(goTo(36), node, true); } break;
                    case 132: { Node node = new132(); push(goTo(36), node, true); } break;
                    case 133: { Node node = new133(); push(goTo(36), node, true); } break;
                    case 134: { Node node = new134(); push(goTo(36), node, true); } break;
                    case 135: { Node node = new135(); push(goTo(36), node, true); } break;
                    case 136: { Node node = new136(); push(goTo(36), node, true); } break;
                    case 137: { Node node = new137(); push(goTo(36), node, true); } break;
                    case 138: { Node node = new138(); push(goTo(36), node, true); } break;
                    case 139: { Node node = new139(); push(goTo(37), node, true); } break;
                    case 140: { Node node = new140(); push(goTo(37), node, true); } break;
                    case 141: { Node node = new141(); push(goTo(38), node, true); } break;
                    case 142: { Node node = new142(); push(goTo(38), node, true); } break;
                    case 143: { Node node = new143(); push(goTo(38), node, true); } break;
                    case 144: { Node node = new144(); push(goTo(38), node, true); } break;
                    case 145: { Node node = new145(); push(goTo(38), node, true); } break;
                    case 146: { Node node = new146(); push(goTo(38), node, true); } break;
                    case 147: { Node node = new147(); push(goTo(38), node, true); } break;
                    case 148: { Node node = new148(); push(goTo(38), node, true); } break;
                    case 149: { Node node = new149(); push(goTo(38), node, true); } break;
                    case 150: { Node node = new150(); push(goTo(38), node, true); } break;
                    case 151: { Node node = new151(); push(goTo(38), node, true); } break;
                    case 152: { Node node = new152(); push(goTo(39), node, true); } break;
                    case 153: { Node node = new153(); push(goTo(40), node, true); } break;
                    case 154: { Node node = new154(); push(goTo(40), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PRecordDescription node1 = (PRecordDescription) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        TDot node2 = (TDot) pop();
        PGroupItem node1 = (PGroupItem) pop();
        ARecordDescription node = new ARecordDescription(node1, node2);
        return node;
    }

    Node new1()
    {
        PElementaryItem node1 = (PElementaryItem) pop();
        ASingleGroupItem node = new ASingleGroupItem(node1);
        return node;
    }

    Node new2()
    {
        PElementaryItem node3 = (PElementaryItem) pop();
        TDot node2 = (TDot) pop();
        PGroupItem node1 = (PGroupItem) pop();
        ASequenceGroupItem node = new ASequenceGroupItem(node1, node2, node3);
        return node;
    }

    Node new3()
    {
        PItem node1 = (PItem) pop();
        AItemElementaryItem node = new AItemElementaryItem(node1);
        return node;
    }

    Node new4()
    {
        PRenamesItem node1 = (PRenamesItem) pop();
        ARenamesItemElementaryItem node = new ARenamesItemElementaryItem(node1);
        return node;
    }

    Node new5()
    {
        PValueItem node1 = (PValueItem) pop();
        AValueItemElementaryItem node = new AValueItemElementaryItem(node1);
        return node;
    }

    Node new6()
    {
        PClauseSequence node4 = null;
        PRedefinesClause node3 = null;
        PDataNameOrFiller node2 = null;
        TNumberNot88 node1 = (TNumberNot88) pop();
        AItem node = new AItem(node1, node2, node3, node4);
        return node;
    }

    Node new7()
    {
        PClauseSequence node4 = null;
        PRedefinesClause node3 = null;
        PDataNameOrFiller node2 = (PDataNameOrFiller) pop();
        TNumberNot88 node1 = (TNumberNot88) pop();
        AItem node = new AItem(node1, node2, node3, node4);
        return node;
    }

    Node new8()
    {
        PClauseSequence node4 = null;
        PRedefinesClause node3 = (PRedefinesClause) pop();
        PDataNameOrFiller node2 = null;
        TNumberNot88 node1 = (TNumberNot88) pop();
        AItem node = new AItem(node1, node2, node3, node4);
        return node;
    }

    Node new9()
    {
        PClauseSequence node4 = null;
        PRedefinesClause node3 = (PRedefinesClause) pop();
        PDataNameOrFiller node2 = (PDataNameOrFiller) pop();
        TNumberNot88 node1 = (TNumberNot88) pop();
        AItem node = new AItem(node1, node2, node3, node4);
        return node;
    }

    Node new10()
    {
        PClauseSequence node4 = (PClauseSequence) pop();
        PRedefinesClause node3 = null;
        PDataNameOrFiller node2 = null;
        TNumberNot88 node1 = (TNumberNot88) pop();
        AItem node = new AItem(node1, node2, node3, node4);
        return node;
    }

    Node new11()
    {
        PClauseSequence node4 = (PClauseSequence) pop();
        PRedefinesClause node3 = null;
        PDataNameOrFiller node2 = (PDataNameOrFiller) pop();
        TNumberNot88 node1 = (TNumberNot88) pop();
        AItem node = new AItem(node1, node2, node3, node4);
        return node;
    }

    Node new12()
    {
        PClauseSequence node4 = (PClauseSequence) pop();
        PRedefinesClause node3 = (PRedefinesClause) pop();
        PDataNameOrFiller node2 = null;
        TNumberNot88 node1 = (TNumberNot88) pop();
        AItem node = new AItem(node1, node2, node3, node4);
        return node;
    }

    Node new13()
    {
        PClauseSequence node4 = (PClauseSequence) pop();
        PRedefinesClause node3 = (PRedefinesClause) pop();
        PDataNameOrFiller node2 = (PDataNameOrFiller) pop();
        TNumberNot88 node1 = (TNumberNot88) pop();
        AItem node = new AItem(node1, node2, node3, node4);
        return node;
    }

    Node new14()
    {
        TDataName node1 = (TDataName) pop();
        ADataNameDataNameOrFiller node = new ADataNameDataNameOrFiller(node1);
        return node;
    }

    Node new15()
    {
        TFiller node1 = (TFiller) pop();
        AFillerDataNameOrFiller node = new AFillerDataNameOrFiller(node1);
        return node;
    }

    Node new16()
    {
        TDataName node2 = (TDataName) pop();
        TRedefines node1 = (TRedefines) pop();
        ARedefinesClause node = new ARedefinesClause(node1, node2);
        return node;
    }

    Node new17()
    {
        PClause node1 = (PClause) pop();
        ASingleClauseSequence node = new ASingleClauseSequence(node1);
        return node;
    }

    Node new18()
    {
        PClause node2 = (PClause) pop();
        PClauseSequence node1 = (PClauseSequence) pop();
        ASequenceClauseSequence node = new ASequenceClauseSequence(node1, node2);
        return node;
    }

    Node new19()
    {
        PBlankWhenZeroClause node1 = (PBlankWhenZeroClause) pop();
        ABlankWhenZeroClauseClause node = new ABlankWhenZeroClauseClause(node1);
        return node;
    }

    Node new20()
    {
        PDateFormatClause node1 = (PDateFormatClause) pop();
        ADateFormatClauseClause node = new ADateFormatClauseClause(node1);
        return node;
    }

    Node new21()
    {
        PExternalClause node1 = (PExternalClause) pop();
        AExternalClauseClause node = new AExternalClauseClause(node1);
        return node;
    }

    Node new22()
    {
        PGlobalClause node1 = (PGlobalClause) pop();
        AGlobalClauseClause node = new AGlobalClauseClause(node1);
        return node;
    }

    Node new23()
    {
        PJustifiedClause node1 = (PJustifiedClause) pop();
        AJustifiedClauseClause node = new AJustifiedClauseClause(node1);
        return node;
    }

    Node new24()
    {
        POccursClause node1 = (POccursClause) pop();
        AOccursClauseClause node = new AOccursClauseClause(node1);
        return node;
    }

    Node new25()
    {
        PPictureClause node1 = (PPictureClause) pop();
        APictureClauseClause node = new APictureClauseClause(node1);
        return node;
    }

    Node new26()
    {
        PSignClause node1 = (PSignClause) pop();
        ASignClauseClause node = new ASignClauseClause(node1);
        return node;
    }

    Node new27()
    {
        PSynchronizedClause node1 = (PSynchronizedClause) pop();
        ASynchronizedClauseClause node = new ASynchronizedClauseClause(node1);
        return node;
    }

    Node new28()
    {
        PUsageClause node1 = (PUsageClause) pop();
        AUsageClauseClause node = new AUsageClauseClause(node1);
        return node;
    }

    Node new29()
    {
        PValueClause node1 = (PValueClause) pop();
        AValueClauseClause node = new AValueClauseClause(node1);
        return node;
    }

    Node new30()
    {
        TZeros node3 = (TZeros) pop();
        TWhen node2 = null;
        TBlank node1 = (TBlank) pop();
        ABlankWhenZeroClause node = new ABlankWhenZeroClause(node1, node2, node3);
        return node;
    }

    Node new31()
    {
        TZeros node3 = (TZeros) pop();
        TWhen node2 = (TWhen) pop();
        TBlank node1 = (TBlank) pop();
        ABlankWhenZeroClause node = new ABlankWhenZeroClause(node1, node2, node3);
        return node;
    }

    Node new32()
    {
        TDataName node4 = (TDataName) pop();
        TIs node3 = null;
        TFormat node2 = (TFormat) pop();
        TDate node1 = (TDate) pop();
        ADateFormatClause node = new ADateFormatClause(node1, node2, node3, node4);
        return node;
    }

    Node new33()
    {
        TDataName node4 = (TDataName) pop();
        TIs node3 = (TIs) pop();
        TFormat node2 = (TFormat) pop();
        TDate node1 = (TDate) pop();
        ADateFormatClause node = new ADateFormatClause(node1, node2, node3, node4);
        return node;
    }

    Node new34()
    {
        TExternal node1 = (TExternal) pop();
        AExternalClause node = new AExternalClause(node1);
        return node;
    }

    Node new35()
    {
        TGlobal node1 = (TGlobal) pop();
        AGlobalClause node = new AGlobalClause(node1);
        return node;
    }

    Node new36()
    {
        TRight node2 = null;
        TJustified node1 = (TJustified) pop();
        AJustifiedClause node = new AJustifiedClause(node1, node2);
        return node;
    }

    Node new37()
    {
        TRight node2 = (TRight) pop();
        TJustified node1 = (TJustified) pop();
        AJustifiedClause node = new AJustifiedClause(node1, node2);
        return node;
    }

    Node new38()
    {
        XPIndexedByPhrase node3 = null;
        XPAscendingOrDescendingKeyPhrase node2 = null;
        POccursFixedOrVariable node1 = (POccursFixedOrVariable) pop();
        AOccursClause node = new AOccursClause(node1, node2, node3);
        return node;
    }

    Node new39()
    {
        XPIndexedByPhrase node3 = null;
        XPAscendingOrDescendingKeyPhrase node2 = (XPAscendingOrDescendingKeyPhrase) pop();
        POccursFixedOrVariable node1 = (POccursFixedOrVariable) pop();
        AOccursClause node = new AOccursClause(node1, node2, node3);
        return node;
    }

    Node new40()
    {
        PAscendingOrDescendingKeyPhrase node2 = (PAscendingOrDescendingKeyPhrase) pop();
        XPAscendingOrDescendingKeyPhrase node1 = (XPAscendingOrDescendingKeyPhrase) pop();
        X1PAscendingOrDescendingKeyPhrase node = new X1PAscendingOrDescendingKeyPhrase(node1, node2);
        return node;
    }

    Node new41()
    {
        PAscendingOrDescendingKeyPhrase node1 = (PAscendingOrDescendingKeyPhrase) pop();
        X2PAscendingOrDescendingKeyPhrase node = new X2PAscendingOrDescendingKeyPhrase(node1);
        return node;
    }

    Node new42()
    {
        XPIndexedByPhrase node3 = (XPIndexedByPhrase) pop();
        XPAscendingOrDescendingKeyPhrase node2 = null;
        POccursFixedOrVariable node1 = (POccursFixedOrVariable) pop();
        AOccursClause node = new AOccursClause(node1, node2, node3);
        return node;
    }

    Node new43()
    {
        PIndexedByPhrase node2 = (PIndexedByPhrase) pop();
        XPIndexedByPhrase node1 = (XPIndexedByPhrase) pop();
        X1PIndexedByPhrase node = new X1PIndexedByPhrase(node1, node2);
        return node;
    }

    Node new44()
    {
        PIndexedByPhrase node1 = (PIndexedByPhrase) pop();
        X2PIndexedByPhrase node = new X2PIndexedByPhrase(node1);
        return node;
    }

    Node new45()
    {
        XPIndexedByPhrase node3 = (XPIndexedByPhrase) pop();
        XPAscendingOrDescendingKeyPhrase node2 = (XPAscendingOrDescendingKeyPhrase) pop();
        POccursFixedOrVariable node1 = (POccursFixedOrVariable) pop();
        AOccursClause node = new AOccursClause(node1, node2, node3);
        return node;
    }

    Node new46()
    {
        TTimes node3 = null;
        PNumber node2 = (PNumber) pop();
        TOccurs node1 = (TOccurs) pop();
        AFixedOccursFixedOrVariable node = new AFixedOccursFixedOrVariable(node1, node2, node3);
        return node;
    }

    Node new47()
    {
        TTimes node3 = (TTimes) pop();
        PNumber node2 = (PNumber) pop();
        TOccurs node1 = (TOccurs) pop();
        AFixedOccursFixedOrVariable node = new AFixedOccursFixedOrVariable(node1, node2, node3);
        return node;
    }

    Node new48()
    {
        TDataName node7 = (TDataName) pop();
        TOn node6 = null;
        TDepending node5 = (TDepending) pop();
        TTimes node4 = null;
        PNumber node3 = (PNumber) pop();
        POccursTo node2 = null;
        TOccurs node1 = (TOccurs) pop();
        AVariableOccursFixedOrVariable node = new AVariableOccursFixedOrVariable(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new49()
    {
        TDataName node7 = (TDataName) pop();
        TOn node6 = null;
        TDepending node5 = (TDepending) pop();
        TTimes node4 = null;
        PNumber node3 = (PNumber) pop();
        POccursTo node2 = (POccursTo) pop();
        TOccurs node1 = (TOccurs) pop();
        AVariableOccursFixedOrVariable node = new AVariableOccursFixedOrVariable(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new50()
    {
        TDataName node7 = (TDataName) pop();
        TOn node6 = null;
        TDepending node5 = (TDepending) pop();
        TTimes node4 = (TTimes) pop();
        PNumber node3 = (PNumber) pop();
        POccursTo node2 = null;
        TOccurs node1 = (TOccurs) pop();
        AVariableOccursFixedOrVariable node = new AVariableOccursFixedOrVariable(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new51()
    {
        TDataName node7 = (TDataName) pop();
        TOn node6 = null;
        TDepending node5 = (TDepending) pop();
        TTimes node4 = (TTimes) pop();
        PNumber node3 = (PNumber) pop();
        POccursTo node2 = (POccursTo) pop();
        TOccurs node1 = (TOccurs) pop();
        AVariableOccursFixedOrVariable node = new AVariableOccursFixedOrVariable(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new52()
    {
        TDataName node7 = (TDataName) pop();
        TOn node6 = (TOn) pop();
        TDepending node5 = (TDepending) pop();
        TTimes node4 = null;
        PNumber node3 = (PNumber) pop();
        POccursTo node2 = null;
        TOccurs node1 = (TOccurs) pop();
        AVariableOccursFixedOrVariable node = new AVariableOccursFixedOrVariable(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new53()
    {
        TDataName node7 = (TDataName) pop();
        TOn node6 = (TOn) pop();
        TDepending node5 = (TDepending) pop();
        TTimes node4 = null;
        PNumber node3 = (PNumber) pop();
        POccursTo node2 = (POccursTo) pop();
        TOccurs node1 = (TOccurs) pop();
        AVariableOccursFixedOrVariable node = new AVariableOccursFixedOrVariable(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new54()
    {
        TDataName node7 = (TDataName) pop();
        TOn node6 = (TOn) pop();
        TDepending node5 = (TDepending) pop();
        TTimes node4 = (TTimes) pop();
        PNumber node3 = (PNumber) pop();
        POccursTo node2 = null;
        TOccurs node1 = (TOccurs) pop();
        AVariableOccursFixedOrVariable node = new AVariableOccursFixedOrVariable(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new55()
    {
        TDataName node7 = (TDataName) pop();
        TOn node6 = (TOn) pop();
        TDepending node5 = (TDepending) pop();
        TTimes node4 = (TTimes) pop();
        PNumber node3 = (PNumber) pop();
        POccursTo node2 = (POccursTo) pop();
        TOccurs node1 = (TOccurs) pop();
        AVariableOccursFixedOrVariable node = new AVariableOccursFixedOrVariable(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new56()
    {
        TTo node2 = (TTo) pop();
        PNumber node1 = (PNumber) pop();
        AOccursTo node = new AOccursTo(node1, node2);
        return node;
    }

    Node new57()
    {
        XTDataName node4 = (XTDataName) pop();
        TIs node3 = null;
        TKey node2 = null;
        PAscendingOrDescending node1 = (PAscendingOrDescending) pop();
        AAscendingOrDescendingKeyPhrase node = new AAscendingOrDescendingKeyPhrase(node1, node2, node3, node4);
        return node;
    }

    Node new58()
    {
        TDataName node2 = (TDataName) pop();
        XTDataName node1 = (XTDataName) pop();
        X1TDataName node = new X1TDataName(node1, node2);
        return node;
    }

    Node new59()
    {
        TDataName node1 = (TDataName) pop();
        X2TDataName node = new X2TDataName(node1);
        return node;
    }

    Node new60()
    {
        XTDataName node4 = (XTDataName) pop();
        TIs node3 = null;
        TKey node2 = (TKey) pop();
        PAscendingOrDescending node1 = (PAscendingOrDescending) pop();
        AAscendingOrDescendingKeyPhrase node = new AAscendingOrDescendingKeyPhrase(node1, node2, node3, node4);
        return node;
    }

    Node new61()
    {
        XTDataName node4 = (XTDataName) pop();
        TIs node3 = (TIs) pop();
        TKey node2 = null;
        PAscendingOrDescending node1 = (PAscendingOrDescending) pop();
        AAscendingOrDescendingKeyPhrase node = new AAscendingOrDescendingKeyPhrase(node1, node2, node3, node4);
        return node;
    }

    Node new62()
    {
        XTDataName node4 = (XTDataName) pop();
        TIs node3 = (TIs) pop();
        TKey node2 = (TKey) pop();
        PAscendingOrDescending node1 = (PAscendingOrDescending) pop();
        AAscendingOrDescendingKeyPhrase node = new AAscendingOrDescendingKeyPhrase(node1, node2, node3, node4);
        return node;
    }

    Node new63()
    {
        TAscending node1 = (TAscending) pop();
        AAscendingAscendingOrDescending node = new AAscendingAscendingOrDescending(node1);
        return node;
    }

    Node new64()
    {
        TDescending node1 = (TDescending) pop();
        ADescendingAscendingOrDescending node = new ADescendingAscendingOrDescending(node1);
        return node;
    }

    Node new65()
    {
        XTDataName node3 = (XTDataName) pop();
        TBy node2 = null;
        TIndexed node1 = (TIndexed) pop();
        AIndexedByPhrase node = new AIndexedByPhrase(node1, node2, node3);
        return node;
    }

    Node new66()
    {
        XTDataName node3 = (XTDataName) pop();
        TBy node2 = (TBy) pop();
        TIndexed node1 = (TIndexed) pop();
        AIndexedByPhrase node = new AIndexedByPhrase(node1, node2, node3);
        return node;
    }

    Node new67()
    {
        PCharacterString node3 = (PCharacterString) pop();
        TIs node2 = null;
        TPicture node1 = (TPicture) pop();
        APictureClause node = new APictureClause(node1, node2, node3);
        return node;
    }

    Node new68()
    {
        PCharacterString node3 = (PCharacterString) pop();
        TIs node2 = (TIs) pop();
        TPicture node1 = (TPicture) pop();
        APictureClause node = new APictureClause(node1, node2, node3);
        return node;
    }

    Node new69()
    {
        PSeparateCharacter node3 = null;
        PLeadingOrTrailing node2 = (PLeadingOrTrailing) pop();
        PSignIs node1 = null;
        ASignClause node = new ASignClause(node1, node2, node3);
        return node;
    }

    Node new70()
    {
        PSeparateCharacter node3 = null;
        PLeadingOrTrailing node2 = (PLeadingOrTrailing) pop();
        PSignIs node1 = (PSignIs) pop();
        ASignClause node = new ASignClause(node1, node2, node3);
        return node;
    }

    Node new71()
    {
        PSeparateCharacter node3 = (PSeparateCharacter) pop();
        PLeadingOrTrailing node2 = (PLeadingOrTrailing) pop();
        PSignIs node1 = null;
        ASignClause node = new ASignClause(node1, node2, node3);
        return node;
    }

    Node new72()
    {
        PSeparateCharacter node3 = (PSeparateCharacter) pop();
        PLeadingOrTrailing node2 = (PLeadingOrTrailing) pop();
        PSignIs node1 = (PSignIs) pop();
        ASignClause node = new ASignClause(node1, node2, node3);
        return node;
    }

    Node new73()
    {
        TIs node2 = null;
        TSign node1 = (TSign) pop();
        ASignIs node = new ASignIs(node1, node2);
        return node;
    }

    Node new74()
    {
        TIs node2 = (TIs) pop();
        TSign node1 = (TSign) pop();
        ASignIs node = new ASignIs(node1, node2);
        return node;
    }

    Node new75()
    {
        TLeading node1 = (TLeading) pop();
        ALeadingLeadingOrTrailing node = new ALeadingLeadingOrTrailing(node1);
        return node;
    }

    Node new76()
    {
        TTrailing node1 = (TTrailing) pop();
        ATrailingLeadingOrTrailing node = new ATrailingLeadingOrTrailing(node1);
        return node;
    }

    Node new77()
    {
        TCharacter node2 = null;
        TSeparate node1 = (TSeparate) pop();
        ASeparateCharacter node = new ASeparateCharacter(node1, node2);
        return node;
    }

    Node new78()
    {
        TCharacter node2 = (TCharacter) pop();
        TSeparate node1 = (TSeparate) pop();
        ASeparateCharacter node = new ASeparateCharacter(node1, node2);
        return node;
    }

    Node new79()
    {
        PLeftOrRight node2 = null;
        TSynchronized node1 = (TSynchronized) pop();
        ASynchronizedClause node = new ASynchronizedClause(node1, node2);
        return node;
    }

    Node new80()
    {
        PLeftOrRight node2 = (PLeftOrRight) pop();
        TSynchronized node1 = (TSynchronized) pop();
        ASynchronizedClause node = new ASynchronizedClause(node1, node2);
        return node;
    }

    Node new81()
    {
        TLeft node1 = (TLeft) pop();
        ALeftLeftOrRight node = new ALeftLeftOrRight(node1);
        return node;
    }

    Node new82()
    {
        TRight node1 = (TRight) pop();
        ARightLeftOrRight node = new ARightLeftOrRight(node1);
        return node;
    }

    Node new83()
    {
        PUsagePhrase node2 = (PUsagePhrase) pop();
        PUsageIs node1 = null;
        AUsageClause node = new AUsageClause(node1, node2);
        return node;
    }

    Node new84()
    {
        PUsagePhrase node2 = (PUsagePhrase) pop();
        PUsageIs node1 = (PUsageIs) pop();
        AUsageClause node = new AUsageClause(node1, node2);
        return node;
    }

    Node new85()
    {
        TIs node2 = null;
        TUsage node1 = (TUsage) pop();
        AUsageIs node = new AUsageIs(node1, node2);
        return node;
    }

    Node new86()
    {
        TIs node2 = (TIs) pop();
        TUsage node1 = (TUsage) pop();
        AUsageIs node = new AUsageIs(node1, node2);
        return node;
    }

    Node new87()
    {
        TNative node2 = null;
        TBinary node1 = (TBinary) pop();
        ABinaryUsagePhrase node = new ABinaryUsagePhrase(node1, node2);
        return node;
    }

    Node new88()
    {
        TNative node2 = (TNative) pop();
        TBinary node1 = (TBinary) pop();
        ABinaryUsagePhrase node = new ABinaryUsagePhrase(node1, node2);
        return node;
    }

    Node new89()
    {
        TComp node1 = (TComp) pop();
        ACompUsagePhrase node = new ACompUsagePhrase(node1);
        return node;
    }

    Node new90()
    {
        TNative node2 = null;
        TComp1 node1 = (TComp1) pop();
        AComp1UsagePhrase node = new AComp1UsagePhrase(node1, node2);
        return node;
    }

    Node new91()
    {
        TNative node2 = (TNative) pop();
        TComp1 node1 = (TComp1) pop();
        AComp1UsagePhrase node = new AComp1UsagePhrase(node1, node2);
        return node;
    }

    Node new92()
    {
        TNative node2 = null;
        TComp2 node1 = (TComp2) pop();
        AComp2UsagePhrase node = new AComp2UsagePhrase(node1, node2);
        return node;
    }

    Node new93()
    {
        TNative node2 = (TNative) pop();
        TComp2 node1 = (TComp2) pop();
        AComp2UsagePhrase node = new AComp2UsagePhrase(node1, node2);
        return node;
    }

    Node new94()
    {
        TComp3 node1 = (TComp3) pop();
        AComp3UsagePhrase node = new AComp3UsagePhrase(node1);
        return node;
    }

    Node new95()
    {
        TNative node2 = null;
        TComp4 node1 = (TComp4) pop();
        AComp4UsagePhrase node = new AComp4UsagePhrase(node1, node2);
        return node;
    }

    Node new96()
    {
        TNative node2 = (TNative) pop();
        TComp4 node1 = (TComp4) pop();
        AComp4UsagePhrase node = new AComp4UsagePhrase(node1, node2);
        return node;
    }

    Node new97()
    {
        TComp5 node1 = (TComp5) pop();
        AComp5UsagePhrase node = new AComp5UsagePhrase(node1);
        return node;
    }

    Node new98()
    {
        TNative node2 = null;
        TDisplay node1 = (TDisplay) pop();
        ADisplayUsagePhrase node = new ADisplayUsagePhrase(node1, node2);
        return node;
    }

    Node new99()
    {
        TNative node2 = (TNative) pop();
        TDisplay node1 = (TDisplay) pop();
        ADisplayUsagePhrase node = new ADisplayUsagePhrase(node1, node2);
        return node;
    }

    Node new100()
    {
        TNative node2 = null;
        TDisplay1 node1 = (TDisplay1) pop();
        ADisplay1UsagePhrase node = new ADisplay1UsagePhrase(node1, node2);
        return node;
    }

    Node new101()
    {
        TNative node2 = (TNative) pop();
        TDisplay1 node1 = (TDisplay1) pop();
        ADisplay1UsagePhrase node = new ADisplay1UsagePhrase(node1, node2);
        return node;
    }

    Node new102()
    {
        TIndex node1 = (TIndex) pop();
        AIndexUsagePhrase node = new AIndexUsagePhrase(node1);
        return node;
    }

    Node new103()
    {
        TNational node1 = (TNational) pop();
        ANationalUsagePhrase node = new ANationalUsagePhrase(node1);
        return node;
    }

    Node new104()
    {
        PObjectReferencePhrase node1 = (PObjectReferencePhrase) pop();
        AObjectReferencePhraseUsagePhrase node = new AObjectReferencePhraseUsagePhrase(node1);
        return node;
    }

    Node new105()
    {
        TPackedDecimal node1 = (TPackedDecimal) pop();
        APackedDecimalUsagePhrase node = new APackedDecimalUsagePhrase(node1);
        return node;
    }

    Node new106()
    {
        TPointer node1 = (TPointer) pop();
        APointerUsagePhrase node = new APointerUsagePhrase(node1);
        return node;
    }

    Node new107()
    {
        TProcedurePointer node1 = (TProcedurePointer) pop();
        AProcedurePointerUsagePhrase node = new AProcedurePointerUsagePhrase(node1);
        return node;
    }

    Node new108()
    {
        TFunctionPointer node1 = (TFunctionPointer) pop();
        AFunctionPointerUsagePhrase node = new AFunctionPointerUsagePhrase(node1);
        return node;
    }

    Node new109()
    {
        TDataName node3 = null;
        TReference node2 = (TReference) pop();
        TObject node1 = (TObject) pop();
        AObjectReferencePhrase node = new AObjectReferencePhrase(node1, node2, node3);
        return node;
    }

    Node new110()
    {
        TDataName node3 = (TDataName) pop();
        TReference node2 = (TReference) pop();
        TObject node1 = (TObject) pop();
        AObjectReferencePhrase node = new AObjectReferencePhrase(node1, node2, node3);
        return node;
    }

    Node new111()
    {
        PThroughPhrase node5 = null;
        TDataName node4 = (TDataName) pop();
        TRenames node3 = (TRenames) pop();
        TDataName node2 = (TDataName) pop();
        TNumberNot88 node1 = (TNumberNot88) pop();
        ARenamesItem node = new ARenamesItem(node1, node2, node3, node4, node5);
        return node;
    }

    Node new112()
    {
        PThroughPhrase node5 = (PThroughPhrase) pop();
        TDataName node4 = (TDataName) pop();
        TRenames node3 = (TRenames) pop();
        TDataName node2 = (TDataName) pop();
        TNumberNot88 node1 = (TNumberNot88) pop();
        ARenamesItem node = new ARenamesItem(node1, node2, node3, node4, node5);
        return node;
    }

    Node new113()
    {
        TDataName node2 = (TDataName) pop();
        TThrough node1 = (TThrough) pop();
        AThroughPhrase node = new AThroughPhrase(node1, node2);
        return node;
    }

    Node new114()
    {
        PLiteral node4 = (PLiteral) pop();
        TAll node3 = null;
        TIs node2 = null;
        TValue node1 = (TValue) pop();
        AValueClause node = new AValueClause(node1, node2, node3, node4);
        return node;
    }

    Node new115()
    {
        PLiteral node4 = (PLiteral) pop();
        TAll node3 = null;
        TIs node2 = (TIs) pop();
        TValue node1 = (TValue) pop();
        AValueClause node = new AValueClause(node1, node2, node3, node4);
        return node;
    }

    Node new116()
    {
        PLiteral node4 = (PLiteral) pop();
        TAll node3 = (TAll) pop();
        TIs node2 = null;
        TValue node1 = (TValue) pop();
        AValueClause node = new AValueClause(node1, node2, node3, node4);
        return node;
    }

    Node new117()
    {
        PLiteral node4 = (PLiteral) pop();
        TAll node3 = (TAll) pop();
        TIs node2 = (TIs) pop();
        TValue node1 = (TValue) pop();
        AValueClause node = new AValueClause(node1, node2, node3, node4);
        return node;
    }

    Node new118()
    {
        PLiteralSequence node4 = (PLiteralSequence) pop();
        PValueOrValues node3 = (PValueOrValues) pop();
        TDataName node2 = (TDataName) pop();
        TNumber88 node1 = (TNumber88) pop();
        AValueItem node = new AValueItem(node1, node2, node3, node4);
        return node;
    }

    Node new119()
    {
        TIs node2 = null;
        TValue node1 = (TValue) pop();
        AValueValueOrValues node = new AValueValueOrValues(node1, node2);
        return node;
    }

    Node new120()
    {
        TIs node2 = (TIs) pop();
        TValue node1 = (TValue) pop();
        AValueValueOrValues node = new AValueValueOrValues(node1, node2);
        return node;
    }

    Node new121()
    {
        TAre node2 = null;
        TValues node1 = (TValues) pop();
        AValuesValueOrValues node = new AValuesValueOrValues(node1, node2);
        return node;
    }

    Node new122()
    {
        TAre node2 = (TAre) pop();
        TValues node1 = (TValues) pop();
        AValuesValueOrValues node = new AValuesValueOrValues(node1, node2);
        return node;
    }

    Node new123()
    {
        PLiteral node2 = (PLiteral) pop();
        TAll node1 = null;
        ASingleLiteralSequence node = new ASingleLiteralSequence(node1, node2);
        return node;
    }

    Node new124()
    {
        PLiteral node2 = (PLiteral) pop();
        TAll node1 = (TAll) pop();
        ASingleLiteralSequence node = new ASingleLiteralSequence(node1, node2);
        return node;
    }

    Node new125()
    {
        PLiteral node3 = (PLiteral) pop();
        TComma node2 = null;
        PLiteralSequence node1 = (PLiteralSequence) pop();
        ASequenceLiteralSequence node = new ASequenceLiteralSequence(node1, node2, node3);
        return node;
    }

    Node new126()
    {
        PLiteral node3 = (PLiteral) pop();
        TComma node2 = (TComma) pop();
        PLiteralSequence node1 = (PLiteralSequence) pop();
        ASequenceLiteralSequence node = new ASequenceLiteralSequence(node1, node2, node3);
        return node;
    }

    Node new127()
    {
        PLiteral node3 = (PLiteral) pop();
        TThrough node2 = (TThrough) pop();
        PLiteral node1 = (PLiteral) pop();
        AThroughSingleLiteralSequence node = new AThroughSingleLiteralSequence(node1, node2, node3);
        return node;
    }

    Node new128()
    {
        PLiteral node5 = (PLiteral) pop();
        TThrough node4 = (TThrough) pop();
        PLiteral node3 = (PLiteral) pop();
        TComma node2 = null;
        PLiteralSequence node1 = (PLiteralSequence) pop();
        AThroughSequenceLiteralSequence node = new AThroughSequenceLiteralSequence(node1, node2, node3, node4, node5);
        return node;
    }

    Node new129()
    {
        PLiteral node5 = (PLiteral) pop();
        TThrough node4 = (TThrough) pop();
        PLiteral node3 = (PLiteral) pop();
        TComma node2 = (TComma) pop();
        PLiteralSequence node1 = (PLiteralSequence) pop();
        AThroughSequenceLiteralSequence node = new AThroughSequenceLiteralSequence(node1, node2, node3, node4, node5);
        return node;
    }

    Node new130()
    {
        TZeros node1 = (TZeros) pop();
        AZerosLiteral node = new AZerosLiteral(node1);
        return node;
    }

    Node new131()
    {
        TSpaces node1 = (TSpaces) pop();
        ASpacesLiteral node = new ASpacesLiteral(node1);
        return node;
    }

    Node new132()
    {
        THighValues node1 = (THighValues) pop();
        AHighValuesLiteral node = new AHighValuesLiteral(node1);
        return node;
    }

    Node new133()
    {
        TLowValues node1 = (TLowValues) pop();
        ALowValuesLiteral node = new ALowValuesLiteral(node1);
        return node;
    }

    Node new134()
    {
        TQuotes node1 = (TQuotes) pop();
        AQuotesLiteral node = new AQuotesLiteral(node1);
        return node;
    }

    Node new135()
    {
        TNulls node1 = (TNulls) pop();
        ANullsLiteral node = new ANullsLiteral(node1);
        return node;
    }

    Node new136()
    {
        PNumber node1 = (PNumber) pop();
        ANumberLiteral node = new ANumberLiteral(node1);
        return node;
    }

    Node new137()
    {
        TNumericLiteral node1 = (TNumericLiteral) pop();
        ANumericLiteralLiteral node = new ANumericLiteralLiteral(node1);
        return node;
    }

    Node new138()
    {
        TAlphanumericLiteral node1 = (TAlphanumericLiteral) pop();
        AAlphanumericLiteralLiteral node = new AAlphanumericLiteralLiteral(node1);
        return node;
    }

    Node new139()
    {
        PCharacterSubstring node1 = (PCharacterSubstring) pop();
        ASingleCharacterString node = new ASingleCharacterString(node1);
        return node;
    }

    Node new140()
    {
        PCharacterSubstring node2 = (PCharacterSubstring) pop();
        PCharacterString node1 = (PCharacterString) pop();
        ASequenceCharacterString node = new ASequenceCharacterString(node1, node2);
        return node;
    }

    Node new141()
    {
        TDataName node1 = (TDataName) pop();
        ADataNameCharacterSubstring node = new ADataNameCharacterSubstring(node1);
        return node;
    }

    Node new142()
    {
        TPlus node1 = (TPlus) pop();
        APlusCharacterSubstring node = new APlusCharacterSubstring(node1);
        return node;
    }

    Node new143()
    {
        TMinus node1 = (TMinus) pop();
        AMinusCharacterSubstring node = new AMinusCharacterSubstring(node1);
        return node;
    }

    Node new144()
    {
        TStar node1 = (TStar) pop();
        AStarCharacterSubstring node = new AStarCharacterSubstring(node1);
        return node;
    }

    Node new145()
    {
        TSlash node1 = (TSlash) pop();
        ASlashCharacterSubstring node = new ASlashCharacterSubstring(node1);
        return node;
    }

    Node new146()
    {
        TDollar node1 = (TDollar) pop();
        ADollarCharacterSubstring node = new ADollarCharacterSubstring(node1);
        return node;
    }

    Node new147()
    {
        TComma node1 = (TComma) pop();
        ACommaCharacterSubstring node = new ACommaCharacterSubstring(node1);
        return node;
    }

    Node new148()
    {
        TNumberNot88 node1 = (TNumberNot88) pop();
        ANumberCharacterSubstring node = new ANumberCharacterSubstring(node1);
        return node;
    }

    Node new149()
    {
        TNumericLiteral node1 = (TNumericLiteral) pop();
        ANumericLiteralCharacterSubstring node = new ANumericLiteralCharacterSubstring(node1);
        return node;
    }

    Node new150()
    {
        PBracketedNumber node1 = (PBracketedNumber) pop();
        ABracketedNumberCharacterSubstring node = new ABracketedNumberCharacterSubstring(node1);
        return node;
    }

    Node new151()
    {
        TDotZee node1 = (TDotZee) pop();
        ADotZeeCharacterSubstring node = new ADotZeeCharacterSubstring(node1);
        return node;
    }

    Node new152()
    {
        TRparen node3 = (TRparen) pop();
        PNumber node2 = (PNumber) pop();
        TLparen node1 = (TLparen) pop();
        ABracketedNumber node = new ABracketedNumber(node1, node2, node3);
        return node;
    }

    Node new153()
    {
        TNumberNot88 node1 = (TNumberNot88) pop();
        ANumberNot88Number node = new ANumberNot88Number(node1);
        return node;
    }

    Node new154()
    {
        TNumber88 node1 = (TNumber88) pop();
        ANumber88Number node = new ANumber88Number(node1);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {9, SHIFT, 1}, {10, SHIFT, 2}, },
			{{-1, ERROR, 1}, {74, SHIFT, 9}, },
			{{-1, REDUCE, 6}, {17, SHIFT, 10}, {18, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {23, SHIFT, 14}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {27, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, {32, SHIFT, 21}, {33, SHIFT, 22}, {35, SHIFT, 23}, {36, SHIFT, 24}, {38, SHIFT, 25}, {41, SHIFT, 26}, {43, SHIFT, 27}, {46, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {52, SHIFT, 31}, {53, SHIFT, 32}, {54, SHIFT, 33}, {55, SHIFT, 34}, {57, SHIFT, 35}, {62, SHIFT, 36}, {64, SHIFT, 37}, {68, SHIFT, 38}, {69, SHIFT, 39}, {70, SHIFT, 40}, {74, SHIFT, 41}, },
			{{-1, ERROR, 3}, {75, ACCEPT, -1}, },
			{{-1, ERROR, 4}, {0, SHIFT, 63}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 9}, {70, SHIFT, 64}, {71, SHIFT, 65}, },
			{{-1, REDUCE, 87}, {47, SHIFT, 67}, },
			{{-1, ERROR, 11}, {72, SHIFT, 68}, {73, SHIFT, 69}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 90}, {47, SHIFT, 70}, },
			{{-1, REDUCE, 92}, {47, SHIFT, 71}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 95}, {47, SHIFT, 72}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 18}, {34, SHIFT, 73}, },
			{{-1, REDUCE, 98}, {47, SHIFT, 74}, },
			{{-1, REDUCE, 100}, {47, SHIFT, 75}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 36}, {60, SHIFT, 76}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 29}, {58, SHIFT, 77}, },
			{{-1, ERROR, 30}, {9, SHIFT, 78}, {10, SHIFT, 79}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 32}, {1, SHIFT, 82}, {2, SHIFT, 83}, {3, SHIFT, 84}, {4, SHIFT, 85}, {5, SHIFT, 86}, {6, SHIFT, 87}, {7, SHIFT, 88}, {10, SHIFT, 89}, {12, SHIFT, 90}, {13, SHIFT, 91}, {40, SHIFT, 92}, {74, SHIFT, 93}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 107}, },
			{{-1, ERROR, 35}, {74, SHIFT, 97}, },
			{{-1, REDUCE, 73}, {40, SHIFT, 98}, },
			{{-1, REDUCE, 79}, {44, SHIFT, 99}, {60, SHIFT, 100}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 85}, {40, SHIFT, 102}, },
			{{-1, ERROR, 40}, {9, SHIFT, 78}, {10, SHIFT, 79}, {11, SHIFT, 103}, {12, SHIFT, 104}, {14, SHIFT, 105}, {37, SHIFT, 106}, {40, SHIFT, 107}, {45, SHIFT, 108}, {48, SHIFT, 109}, {56, SHIFT, 110}, {63, SHIFT, 111}, {73, SHIFT, 112}, },
			{{-1, REDUCE, 14}, {59, SHIFT, 115}, },
			{{-1, REDUCE, 7}, {17, SHIFT, 10}, {18, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {23, SHIFT, 14}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {27, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, {32, SHIFT, 21}, {35, SHIFT, 23}, {36, SHIFT, 24}, {38, SHIFT, 25}, {41, SHIFT, 26}, {43, SHIFT, 27}, {46, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {52, SHIFT, 31}, {53, SHIFT, 32}, {54, SHIFT, 33}, {55, SHIFT, 34}, {57, SHIFT, 35}, {62, SHIFT, 36}, {64, SHIFT, 37}, {68, SHIFT, 38}, {69, SHIFT, 39}, {70, SHIFT, 40}, },
			{{-1, REDUCE, 8}, {17, SHIFT, 10}, {18, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {23, SHIFT, 14}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {27, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, {32, SHIFT, 21}, {35, SHIFT, 23}, {36, SHIFT, 24}, {38, SHIFT, 25}, {41, SHIFT, 26}, {43, SHIFT, 27}, {46, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {52, SHIFT, 31}, {53, SHIFT, 32}, {54, SHIFT, 33}, {55, SHIFT, 34}, {62, SHIFT, 36}, {64, SHIFT, 37}, {68, SHIFT, 38}, {69, SHIFT, 39}, {70, SHIFT, 40}, },
			{{-1, REDUCE, 10}, {17, SHIFT, 10}, {18, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {23, SHIFT, 14}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {27, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, {32, SHIFT, 21}, {35, SHIFT, 23}, {36, SHIFT, 24}, {38, SHIFT, 25}, {41, SHIFT, 26}, {43, SHIFT, 27}, {46, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {52, SHIFT, 31}, {53, SHIFT, 32}, {54, SHIFT, 33}, {55, SHIFT, 34}, {62, SHIFT, 36}, {64, SHIFT, 37}, {68, SHIFT, 38}, {69, SHIFT, 39}, {70, SHIFT, 40}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 38}, {16, SHIFT, 120}, {29, SHIFT, 121}, {39, SHIFT, 122}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 55}, {43, SHIFT, 27}, {68, SHIFT, 38}, },
			{{-1, REDUCE, 69}, {61, SHIFT, 129}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 59}, {17, SHIFT, 10}, {21, SHIFT, 12}, {22, SHIFT, 13}, {23, SHIFT, 14}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 19}, {31, SHIFT, 20}, {35, SHIFT, 23}, {38, SHIFT, 25}, {46, SHIFT, 28}, {49, SHIFT, 29}, {52, SHIFT, 31}, {54, SHIFT, 33}, {55, SHIFT, 34}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 0}, {9, SHIFT, 1}, {10, SHIFT, 2}, },
			{{-1, REDUCE, 119}, {40, SHIFT, 133}, },
			{{-1, REDUCE, 121}, {15, SHIFT, 134}, },
			{{-1, ERROR, 66}, {9, SHIFT, 78}, {10, SHIFT, 79}, {11, SHIFT, 103}, {12, SHIFT, 104}, {14, SHIFT, 135}, {37, SHIFT, 106}, {45, SHIFT, 108}, {48, SHIFT, 109}, {56, SHIFT, 110}, {63, SHIFT, 111}, {73, SHIFT, 112}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 68}, {73, SHIFT, 138}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 73}, {40, SHIFT, 139}, {74, SHIFT, 140}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 109}, {74, SHIFT, 141}, },
			{{-1, REDUCE, 154}, },
			{{-1, REDUCE, 153}, },
			{{-1, ERROR, 80}, {9, SHIFT, 78}, {10, SHIFT, 79}, },
			{{-1, REDUCE, 46}, {28, SHIFT, 143}, {66, SHIFT, 144}, {67, SHIFT, 145}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 146}, },
			{{-1, ERROR, 88}, {9, SHIFT, 78}, {10, SHIFT, 79}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 151}, },
			{{-1, ERROR, 92}, {1, SHIFT, 82}, {2, SHIFT, 83}, {3, SHIFT, 84}, {4, SHIFT, 85}, {5, SHIFT, 86}, {6, SHIFT, 87}, {7, SHIFT, 88}, {10, SHIFT, 89}, {12, SHIFT, 90}, {13, SHIFT, 91}, {74, SHIFT, 93}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 67}, {1, SHIFT, 82}, {2, SHIFT, 83}, {3, SHIFT, 84}, {4, SHIFT, 85}, {5, SHIFT, 86}, {6, SHIFT, 87}, {7, SHIFT, 88}, {10, SHIFT, 89}, {12, SHIFT, 90}, {13, SHIFT, 91}, {74, SHIFT, 93}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 137}, },
			{{-1, ERROR, 105}, {9, SHIFT, 78}, {10, SHIFT, 79}, {11, SHIFT, 103}, {12, SHIFT, 104}, {37, SHIFT, 106}, {45, SHIFT, 108}, {48, SHIFT, 109}, {56, SHIFT, 110}, {63, SHIFT, 111}, {73, SHIFT, 112}, },
			{{-1, REDUCE, 132}, },
			{{-1, ERROR, 107}, {9, SHIFT, 78}, {10, SHIFT, 79}, {11, SHIFT, 103}, {12, SHIFT, 104}, {14, SHIFT, 150}, {37, SHIFT, 106}, {45, SHIFT, 108}, {48, SHIFT, 109}, {56, SHIFT, 110}, {63, SHIFT, 111}, {73, SHIFT, 112}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 136}, },
			{{-1, ERROR, 115}, {74, SHIFT, 152}, },
			{{-1, REDUCE, 9}, {17, SHIFT, 10}, {18, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {23, SHIFT, 14}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {27, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, {32, SHIFT, 21}, {35, SHIFT, 23}, {36, SHIFT, 24}, {38, SHIFT, 25}, {41, SHIFT, 26}, {43, SHIFT, 27}, {46, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {52, SHIFT, 31}, {53, SHIFT, 32}, {54, SHIFT, 33}, {55, SHIFT, 34}, {62, SHIFT, 36}, {64, SHIFT, 37}, {68, SHIFT, 38}, {69, SHIFT, 39}, {70, SHIFT, 40}, },
			{{-1, REDUCE, 11}, {17, SHIFT, 10}, {18, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {23, SHIFT, 14}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {27, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, {32, SHIFT, 21}, {35, SHIFT, 23}, {36, SHIFT, 24}, {38, SHIFT, 25}, {41, SHIFT, 26}, {43, SHIFT, 27}, {46, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {52, SHIFT, 31}, {53, SHIFT, 32}, {54, SHIFT, 33}, {55, SHIFT, 34}, {62, SHIFT, 36}, {64, SHIFT, 37}, {68, SHIFT, 38}, {69, SHIFT, 39}, {70, SHIFT, 40}, },
			{{-1, REDUCE, 12}, {17, SHIFT, 10}, {18, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {23, SHIFT, 14}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {27, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, {32, SHIFT, 21}, {35, SHIFT, 23}, {36, SHIFT, 24}, {38, SHIFT, 25}, {41, SHIFT, 26}, {43, SHIFT, 27}, {46, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {52, SHIFT, 31}, {53, SHIFT, 32}, {54, SHIFT, 33}, {55, SHIFT, 34}, {62, SHIFT, 36}, {64, SHIFT, 37}, {68, SHIFT, 38}, {69, SHIFT, 39}, {70, SHIFT, 40}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 122}, {19, SHIFT, 154}, {74, SHIFT, 155}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 124}, {40, SHIFT, 157}, {42, SHIFT, 158}, {74, SHIFT, 155}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 39}, {16, SHIFT, 120}, {29, SHIFT, 121}, {39, SHIFT, 122}, },
			{{-1, REDUCE, 42}, {39, SHIFT, 122}, },
			{{-1, REDUCE, 70}, {61, SHIFT, 129}, },
			{{-1, REDUCE, 77}, {20, SHIFT, 164}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 122}, },
			{{-1, ERROR, 135}, {9, SHIFT, 78}, {10, SHIFT, 79}, {11, SHIFT, 103}, {12, SHIFT, 104}, {37, SHIFT, 106}, {45, SHIFT, 108}, {48, SHIFT, 109}, {56, SHIFT, 110}, {63, SHIFT, 111}, {73, SHIFT, 112}, },
			{{-1, REDUCE, 118}, {1, SHIFT, 166}, {9, SHIFT, 78}, {10, SHIFT, 79}, {11, SHIFT, 103}, {12, SHIFT, 104}, {37, SHIFT, 106}, {45, SHIFT, 108}, {48, SHIFT, 109}, {56, SHIFT, 110}, {63, SHIFT, 111}, {73, SHIFT, 112}, },
			{{-1, REDUCE, 123}, {65, SHIFT, 168}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 139}, {74, SHIFT, 169}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 142}, {28, SHIFT, 170}, {66, SHIFT, 171}, },
			{{-1, ERROR, 143}, {51, SHIFT, 172}, {74, SHIFT, 173}, },
			{{-1, REDUCE, 47}, {28, SHIFT, 174}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 146}, {8, SHIFT, 175}, },
			{{-1, REDUCE, 68}, {1, SHIFT, 82}, {2, SHIFT, 83}, {3, SHIFT, 84}, {4, SHIFT, 85}, {5, SHIFT, 86}, {6, SHIFT, 87}, {7, SHIFT, 88}, {10, SHIFT, 89}, {12, SHIFT, 90}, {13, SHIFT, 91}, {74, SHIFT, 93}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 150}, {9, SHIFT, 78}, {10, SHIFT, 79}, {11, SHIFT, 103}, {12, SHIFT, 104}, {37, SHIFT, 106}, {45, SHIFT, 108}, {48, SHIFT, 109}, {56, SHIFT, 110}, {63, SHIFT, 111}, {73, SHIFT, 112}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 111}, {65, SHIFT, 177}, },
			{{-1, REDUCE, 13}, {17, SHIFT, 10}, {18, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {23, SHIFT, 14}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {27, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, {32, SHIFT, 21}, {35, SHIFT, 23}, {36, SHIFT, 24}, {38, SHIFT, 25}, {41, SHIFT, 26}, {43, SHIFT, 27}, {46, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {52, SHIFT, 31}, {53, SHIFT, 32}, {54, SHIFT, 33}, {55, SHIFT, 34}, {62, SHIFT, 36}, {64, SHIFT, 37}, {68, SHIFT, 38}, {69, SHIFT, 39}, {70, SHIFT, 40}, },
			{{-1, ERROR, 154}, {74, SHIFT, 155}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 65}, {74, SHIFT, 180}, },
			{{-1, ERROR, 157}, {74, SHIFT, 155}, },
			{{-1, ERROR, 158}, {40, SHIFT, 182}, {74, SHIFT, 155}, },
			{{-1, REDUCE, 57}, {74, SHIFT, 180}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 45}, {39, SHIFT, 122}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 124}, },
			{{-1, ERROR, 166}, {9, SHIFT, 78}, {10, SHIFT, 79}, {11, SHIFT, 103}, {12, SHIFT, 104}, {37, SHIFT, 106}, {45, SHIFT, 108}, {48, SHIFT, 109}, {56, SHIFT, 110}, {63, SHIFT, 111}, {73, SHIFT, 112}, },
			{{-1, REDUCE, 125}, {65, SHIFT, 185}, },
			{{-1, ERROR, 168}, {9, SHIFT, 78}, {10, SHIFT, 79}, {11, SHIFT, 103}, {12, SHIFT, 104}, {37, SHIFT, 106}, {45, SHIFT, 108}, {48, SHIFT, 109}, {56, SHIFT, 110}, {63, SHIFT, 111}, {73, SHIFT, 112}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 170}, {51, SHIFT, 187}, {74, SHIFT, 188}, },
			{{-1, ERROR, 171}, {28, SHIFT, 189}, },
			{{-1, ERROR, 172}, {74, SHIFT, 190}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 174}, {51, SHIFT, 191}, {74, SHIFT, 192}, },
			{{-1, REDUCE, 152}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 177}, {74, SHIFT, 193}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 66}, {74, SHIFT, 180}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 61}, {74, SHIFT, 180}, },
			{{-1, ERROR, 182}, {74, SHIFT, 155}, },
			{{-1, REDUCE, 60}, {74, SHIFT, 180}, },
			{{-1, REDUCE, 126}, {65, SHIFT, 195}, },
			{{-1, ERROR, 185}, {9, SHIFT, 78}, {10, SHIFT, 79}, {11, SHIFT, 103}, {12, SHIFT, 104}, {37, SHIFT, 106}, {45, SHIFT, 108}, {48, SHIFT, 109}, {56, SHIFT, 110}, {63, SHIFT, 111}, {73, SHIFT, 112}, },
			{{-1, REDUCE, 127}, },
			{{-1, ERROR, 187}, {74, SHIFT, 197}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 189}, {51, SHIFT, 198}, {74, SHIFT, 199}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 191}, {74, SHIFT, 200}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 62}, {74, SHIFT, 180}, },
			{{-1, ERROR, 195}, {9, SHIFT, 78}, {10, SHIFT, 79}, {11, SHIFT, 103}, {12, SHIFT, 104}, {37, SHIFT, 106}, {45, SHIFT, 108}, {48, SHIFT, 109}, {56, SHIFT, 110}, {63, SHIFT, 111}, {73, SHIFT, 112}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 198}, {74, SHIFT, 202}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 55}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, },
			{{-1, 5}, {63, 132}, },
			{{-1, 6}, },
			{{-1, 42}, },
			{{-1, 43}, {42, 116}, },
			{{-1, 44}, {42, 117}, {43, 118}, {116, 153}, },
			{{-1, 45}, {44, 119}, {117, 119}, {118, 119}, {153, 119}, },
			{{-1, 46}, },
			{{-1, 47}, },
			{{-1, 48}, },
			{{-1, 49}, },
			{{-1, 50}, },
			{{-1, 51}, },
			{{-1, 52}, },
			{{-1, 80}, },
			{{-1, 123}, {126, 160}, },
			{{-1, 124}, },
			{{-1, 125}, {127, 162}, {161, 162}, },
			{{-1, 53}, },
			{{-1, 54}, },
			{{-1, 55}, },
			{{-1, 56}, {55, 128}, },
			{{-1, 130}, {128, 163}, },
			{{-1, 57}, },
			{{-1, 101}, },
			{{-1, 58}, },
			{{-1, 59}, },
			{{-1, 60}, {59, 131}, },
			{{-1, 61}, },
			{{-1, 7}, },
			{{-1, 178}, },
			{{-1, 62}, },
			{{-1, 8}, },
			{{-1, 66}, },
			{{-1, 136}, },
			{{-1, 113}, {66, 137}, {105, 149}, {107, 151}, {135, 165}, {136, 167}, {150, 176}, {166, 184}, {168, 186}, {185, 196}, {195, 201}, },
			{{-1, 94}, {92, 147}, },
			{{-1, 95}, {94, 148}, {147, 148}, },
			{{-1, 96}, },
			{{-1, 114}, {30, 81}, {80, 142}, {88, 146}, },
			{{-1, 126}, },
			{{-1, 127}, {126, 161}, },
			{{-1, 156}, {124, 159}, {154, 179}, {157, 181}, {158, 183}, {182, 194}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: number88, number not88",
			"expecting: data name",
			"expecting: '.', binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, filler, function pointer, global, index, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, redefines, sign, synchronized, trailing, usage, value, data name",
			"expecting: EOF",
			"expecting: '.'",
			"expecting: value, values",
			"expecting: '.', binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, justified, leading, national, native, object, occurs, packed decimal, picture, pointer, procedure pointer, sign, synchronized, trailing, usage, value",
			"expecting: when, zeros",
			"expecting: '.', binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, sign, synchronized, trailing, usage, value",
			"expecting: format",
			"expecting: '.', binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, redefines, sign, synchronized, trailing, usage, value",
			"expecting: '.', binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, right, sign, synchronized, trailing, usage, value",
			"expecting: '.', binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, separate, sign, synchronized, trailing, usage, value",
			"expecting: reference",
			"expecting: ',', '/', '+', '-', '*', '$', '(', number not88, numeric literal, dot zee, is, data name",
			"expecting: is, leading, trailing",
			"expecting: '.', binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, justified, leading, left, national, object, occurs, packed decimal, picture, pointer, procedure pointer, right, sign, synchronized, trailing, usage, value",
			"expecting: binary, comp, comp1, comp2, comp3, comp4, comp5, display, display1, function pointer, index, is, national, object, packed decimal, pointer, procedure pointer",
			"expecting: number88, number not88, alphanumeric literal, numeric literal, all, high values, is, low values, nulls, quotes, spaces, zeros",
			"expecting: '.', binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, redefines, renames, sign, synchronized, trailing, usage, value",
			"expecting: '.', ascending, binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, descending, display, display1, external, function pointer, global, index, indexed, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, sign, synchronized, trailing, usage, value",
			"expecting: leading, trailing",
			"expecting: binary, comp, comp1, comp2, comp3, comp4, comp5, display, display1, function pointer, index, national, object, packed decimal, pointer, procedure pointer",
			"expecting: number88, number not88, EOF",
			"expecting: number88, number not88, alphanumeric literal, numeric literal, all, are, high values, low values, nulls, quotes, spaces, zeros",
			"expecting: number88, number not88, alphanumeric literal, numeric literal, all, high values, low values, nulls, quotes, spaces, zeros",
			"expecting: zeros",
			"expecting: is, data name",
			"expecting: '.', binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, sign, synchronized, trailing, usage, value, data name",
			"expecting: '.', ',', ')', number88, number not88, alphanumeric literal, numeric literal, ascending, binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, depending, descending, display, display1, external, function pointer, global, high values, index, indexed, justified, leading, low values, national, nulls, object, occurs, packed decimal, picture, pointer, procedure pointer, quotes, sign, spaces, synchronized, through, times, to, trailing, usage, value, zeros",
			"expecting: '.', ascending, binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, depending, descending, display, display1, external, function pointer, global, index, indexed, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, sign, synchronized, times, to, trailing, usage, value",
			"expecting: '.', ',', '/', '+', '-', '*', '$', '(', number not88, numeric literal, dot zee, binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, sign, synchronized, trailing, usage, value, data name",
			"expecting: ',', '/', '+', '-', '*', '$', '(', number not88, numeric literal, dot zee, data name",
			"expecting: '.', ',', number88, number not88, alphanumeric literal, numeric literal, binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, high values, index, justified, leading, low values, national, nulls, object, occurs, packed decimal, picture, pointer, procedure pointer, quotes, sign, spaces, synchronized, through, trailing, usage, value, zeros",
			"expecting: number88, number not88, alphanumeric literal, numeric literal, high values, low values, nulls, quotes, spaces, zeros",
			"expecting: is, key, data name",
			"expecting: by, data name",
			"expecting: '.', binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, indexed, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, sign, synchronized, trailing, usage, value",
			"expecting: '.', binary, blank, character, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, sign, synchronized, trailing, usage, value",
			"expecting: '.', ',', number88, number not88, alphanumeric literal, numeric literal, high values, low values, nulls, quotes, spaces, zeros",
			"expecting: '.', ',', number88, number not88, alphanumeric literal, numeric literal, high values, low values, nulls, quotes, spaces, through, zeros",
			"expecting: depending, times",
			"expecting: on, data name",
			"expecting: '.', ascending, binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, depending, descending, display, display1, external, function pointer, global, index, indexed, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, sign, synchronized, trailing, usage, value",
			"expecting: ')'",
			"expecting: '.', through",
			"expecting: '.', ascending, binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, descending, display, display1, external, function pointer, global, index, indexed, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, sign, synchronized, trailing, usage, value, data name",
			"expecting: '.', binary, blank, comp, comp1, comp2, comp3, comp4, comp5, date, display, display1, external, function pointer, global, index, indexed, justified, leading, national, object, occurs, packed decimal, picture, pointer, procedure pointer, sign, synchronized, trailing, usage, value, data name",
			"expecting: depending",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7, 8, 6, 6, 8, 6, 8, 9, 6, 6, 8, 10, 8, 8, 8, 11, 12, 8, 13, 0, 8, 14, 8, 8, 1, 15, 16, 12, 17, 18, 19, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 21, 12, 8, 8, 22, 8, 8, 8, 23, 18, 24, 25, 8, 26, 8, 8, 8, 8, 27, 8, 8, 8, 28, 29, 29, 0, 30, 31, 31, 31, 31, 31, 31, 0, 31, 31, 31, 32, 31, 31, 31, 31, 8, 21, 8, 8, 8, 22, 33, 33, 34, 33, 25, 33, 33, 33, 33, 33, 8, 33, 1, 8, 8, 8, 8, 35, 35, 36, 20, 35, 37, 20, 37, 12, 38, 8, 8, 4, 25, 25, 34, 39, 40, 8, 1, 8, 8, 41, 42, 43, 0, 44, 31, 31, 8, 34, 8, 45, 8, 1, 46, 47, 1, 27, 46, 20, 37, 37, 8, 8, 39, 34, 40, 34, 8, 42, 48, 1, 20, 42, 31, 8, 1, 4, 47, 46, 46, 1, 46, 40, 34, 39, 1, 20, 42, 20, 1, 20, 4, 46, 34, 39, 20, 1, 20, 20, 39, 20, 
        };*/
}
