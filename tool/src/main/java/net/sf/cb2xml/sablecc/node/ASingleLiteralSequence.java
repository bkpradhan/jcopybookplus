/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

import java.util.*;


public final class ASingleLiteralSequence extends PLiteralSequence
{
    private TAll _all_;
    private PLiteral _literal_;

    public ASingleLiteralSequence ()
    {
    }

    public ASingleLiteralSequence (TAll _all_, PLiteral _literal_)
    {
        setAll (_all_);

        setLiteral (_literal_);
    }

    public Object clone ()
    {
        return new ASingleLiteralSequence((TAll) cloneNode (_all_),
            (PLiteral) cloneNode (_literal_));
    }

    public void apply (Switch sw)
    {
        ((Analysis) sw).caseASingleLiteralSequence (this);
    }

    public TAll getAll ()
    {
        return _all_;
    }

    public void setAll (TAll node)
    {
        if (_all_ != null)
        {
            _all_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _all_ = node;
    }

    public PLiteral getLiteral ()
    {
        return _literal_;
    }

    public void setLiteral (PLiteral node)
    {
        if (_literal_ != null)
        {
            _literal_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _literal_ = node;
    }

    public String toString ()
    {
        return "" + toString (_all_) + toString (_literal_);
    }

    void removeChild (Node child)
    {
        if (_all_ == child)
        {
            _all_ = null;

            return;
        }

        if (_literal_ == child)
        {
            _literal_ = null;

            return;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
        if (_all_ == oldChild)
        {
            setAll ((TAll) newChild);

            return;
        }

        if (_literal_ == oldChild)
        {
            setLiteral ((PLiteral) newChild);

            return;
        }
    }
}
