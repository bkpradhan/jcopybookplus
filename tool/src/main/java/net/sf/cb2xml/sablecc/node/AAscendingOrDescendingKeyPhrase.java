/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

import java.util.*;


public final class AAscendingOrDescendingKeyPhrase
    extends PAscendingOrDescendingKeyPhrase
{
    private PAscendingOrDescending _ascendingOrDescending_;
    private TKey _key_;
    private TIs _is_;
    private final LinkedList _dataName_ = new TypedLinkedList(new DataName_Cast());

    public AAscendingOrDescendingKeyPhrase ()
    {
    }

    public AAscendingOrDescendingKeyPhrase (
        PAscendingOrDescending _ascendingOrDescending_, TKey _key_, TIs _is_,
        List _dataName_)
    {
        setAscendingOrDescending (_ascendingOrDescending_);

        setKey (_key_);

        setIs (_is_);
        this._dataName_.clear ();
        this._dataName_.addAll (_dataName_);
    }

    public AAscendingOrDescendingKeyPhrase (
        PAscendingOrDescending _ascendingOrDescending_, TKey _key_, TIs _is_,
        XTDataName _dataName_)
    {
        setAscendingOrDescending (_ascendingOrDescending_);

        setKey (_key_);

        setIs (_is_);

        if (_dataName_ != null)
        {
            while (_dataName_ instanceof X1TDataName)
            {
                this._dataName_.addFirst (((X1TDataName) _dataName_).getTDataName ());
                _dataName_ = ((X1TDataName) _dataName_).getXTDataName ();
            }

            this._dataName_.addFirst (((X2TDataName) _dataName_).getTDataName ());
        }
    }

    public Object clone ()
    {
        return new AAscendingOrDescendingKeyPhrase((PAscendingOrDescending) cloneNode (
                _ascendingOrDescending_), (TKey) cloneNode (_key_),
            (TIs) cloneNode (_is_), cloneList (_dataName_));
    }

    public void apply (Switch sw)
    {
        ((Analysis) sw).caseAAscendingOrDescendingKeyPhrase (this);
    }

    public PAscendingOrDescending getAscendingOrDescending ()
    {
        return _ascendingOrDescending_;
    }

    public void setAscendingOrDescending (PAscendingOrDescending node)
    {
        if (_ascendingOrDescending_ != null)
        {
            _ascendingOrDescending_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _ascendingOrDescending_ = node;
    }

    public TKey getKey ()
    {
        return _key_;
    }

    public void setKey (TKey node)
    {
        if (_key_ != null)
        {
            _key_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _key_ = node;
    }

    public TIs getIs ()
    {
        return _is_;
    }

    public void setIs (TIs node)
    {
        if (_is_ != null)
        {
            _is_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _is_ = node;
    }

    public LinkedList getDataName ()
    {
        return _dataName_;
    }

    public void setDataName (List list)
    {
        _dataName_.clear ();
        _dataName_.addAll (list);
    }

    public String toString ()
    {
        return "" + toString (_ascendingOrDescending_) + toString (_key_) +
        toString (_is_) + toString (_dataName_);
    }

    void removeChild (Node child)
    {
        if (_ascendingOrDescending_ == child)
        {
            _ascendingOrDescending_ = null;

            return;
        }

        if (_key_ == child)
        {
            _key_ = null;

            return;
        }

        if (_is_ == child)
        {
            _is_ = null;

            return;
        }

        if (_dataName_.remove (child))
        {
            return;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
        if (_ascendingOrDescending_ == oldChild)
        {
            setAscendingOrDescending ((PAscendingOrDescending) newChild);

            return;
        }

        if (_key_ == oldChild)
        {
            setKey ((TKey) newChild);

            return;
        }

        if (_is_ == oldChild)
        {
            setIs ((TIs) newChild);

            return;
        }

        for (ListIterator i = _dataName_.listIterator (); i.hasNext ();)
        {
            if (i.next () == oldChild)
            {
                if (newChild != null)
                {
                    i.set (newChild);
                    oldChild.parent (null);

                    return;
                }

                i.remove ();
                oldChild.parent (null);

                return;
            }
        }
    }

    private class DataName_Cast implements Cast
    {
        public Object cast (Object o)
        {
            TDataName node = (TDataName) o;

            if ((node.parent () != null) &&
                    (node.parent () != AAscendingOrDescendingKeyPhrase.this))
            {
                node.parent ().removeChild (node);
            }

            if ((node.parent () == null) ||
                    (node.parent () != AAscendingOrDescendingKeyPhrase.this))
            {
                node.parent (AAscendingOrDescendingKeyPhrase.this);
            }

            return node;
        }
    }
}
