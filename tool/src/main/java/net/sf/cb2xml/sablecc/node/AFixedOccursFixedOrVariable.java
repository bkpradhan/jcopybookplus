/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

import java.util.*;


public final class AFixedOccursFixedOrVariable extends POccursFixedOrVariable
{
    private TOccurs _occurs_;
    private PNumber _number_;
    private TTimes _times_;

    public AFixedOccursFixedOrVariable ()
    {
    }

    public AFixedOccursFixedOrVariable (TOccurs _occurs_, PNumber _number_,
        TTimes _times_)
    {
        setOccurs (_occurs_);

        setNumber (_number_);

        setTimes (_times_);
    }

    public Object clone ()
    {
        return new AFixedOccursFixedOrVariable((TOccurs) cloneNode (_occurs_),
            (PNumber) cloneNode (_number_), (TTimes) cloneNode (_times_));
    }

    public void apply (Switch sw)
    {
        ((Analysis) sw).caseAFixedOccursFixedOrVariable (this);
    }

    public TOccurs getOccurs ()
    {
        return _occurs_;
    }

    public void setOccurs (TOccurs node)
    {
        if (_occurs_ != null)
        {
            _occurs_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _occurs_ = node;
    }

    public PNumber getNumber ()
    {
        return _number_;
    }

    public void setNumber (PNumber node)
    {
        if (_number_ != null)
        {
            _number_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _number_ = node;
    }

    public TTimes getTimes ()
    {
        return _times_;
    }

    public void setTimes (TTimes node)
    {
        if (_times_ != null)
        {
            _times_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _times_ = node;
    }

    public String toString ()
    {
        return "" + toString (_occurs_) + toString (_number_) +
        toString (_times_);
    }

    void removeChild (Node child)
    {
        if (_occurs_ == child)
        {
            _occurs_ = null;

            return;
        }

        if (_number_ == child)
        {
            _number_ = null;

            return;
        }

        if (_times_ == child)
        {
            _times_ = null;

            return;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
        if (_occurs_ == oldChild)
        {
            setOccurs ((TOccurs) newChild);

            return;
        }

        if (_number_ == oldChild)
        {
            setNumber ((PNumber) newChild);

            return;
        }

        if (_times_ == oldChild)
        {
            setTimes ((TTimes) newChild);

            return;
        }
    }
}
