/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

import java.util.*;


public final class AComp2UsagePhrase extends PUsagePhrase
{
    private TComp2 _comp2_;
    private TNative _native_;

    public AComp2UsagePhrase ()
    {
    }

    public AComp2UsagePhrase (TComp2 _comp2_, TNative _native_)
    {
        setComp2 (_comp2_);

        setNative (_native_);
    }

    public Object clone ()
    {
        return new AComp2UsagePhrase((TComp2) cloneNode (_comp2_),
            (TNative) cloneNode (_native_));
    }

    public void apply (Switch sw)
    {
        ((Analysis) sw).caseAComp2UsagePhrase (this);
    }

    public TComp2 getComp2 ()
    {
        return _comp2_;
    }

    public void setComp2 (TComp2 node)
    {
        if (_comp2_ != null)
        {
            _comp2_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _comp2_ = node;
    }

    public TNative getNative ()
    {
        return _native_;
    }

    public void setNative (TNative node)
    {
        if (_native_ != null)
        {
            _native_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _native_ = node;
    }

    public String toString ()
    {
        return "" + toString (_comp2_) + toString (_native_);
    }

    void removeChild (Node child)
    {
        if (_comp2_ == child)
        {
            _comp2_ = null;

            return;
        }

        if (_native_ == child)
        {
            _native_ = null;

            return;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
        if (_comp2_ == oldChild)
        {
            setComp2 ((TComp2) newChild);

            return;
        }

        if (_native_ == oldChild)
        {
            setNative ((TNative) newChild);

            return;
        }
    }
}
