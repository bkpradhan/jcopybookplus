/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

import java.util.*;


public final class AUsageClause extends PUsageClause
{
    private PUsageIs _usageIs_;
    private PUsagePhrase _usagePhrase_;

    public AUsageClause ()
    {
    }

    public AUsageClause (PUsageIs _usageIs_, PUsagePhrase _usagePhrase_)
    {
        setUsageIs (_usageIs_);

        setUsagePhrase (_usagePhrase_);
    }

    public Object clone ()
    {
        return new AUsageClause((PUsageIs) cloneNode (_usageIs_),
            (PUsagePhrase) cloneNode (_usagePhrase_));
    }

    public void apply (Switch sw)
    {
        ((Analysis) sw).caseAUsageClause (this);
    }

    public PUsageIs getUsageIs ()
    {
        return _usageIs_;
    }

    public void setUsageIs (PUsageIs node)
    {
        if (_usageIs_ != null)
        {
            _usageIs_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _usageIs_ = node;
    }

    public PUsagePhrase getUsagePhrase ()
    {
        return _usagePhrase_;
    }

    public void setUsagePhrase (PUsagePhrase node)
    {
        if (_usagePhrase_ != null)
        {
            _usagePhrase_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _usagePhrase_ = node;
    }

    public String toString ()
    {
        return "" + toString (_usageIs_) + toString (_usagePhrase_);
    }

    void removeChild (Node child)
    {
        if (_usageIs_ == child)
        {
            _usageIs_ = null;

            return;
        }

        if (_usagePhrase_ == child)
        {
            _usagePhrase_ = null;

            return;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
        if (_usageIs_ == oldChild)
        {
            setUsageIs ((PUsageIs) newChild);

            return;
        }

        if (_usagePhrase_ == oldChild)
        {
            setUsagePhrase ((PUsagePhrase) newChild);

            return;
        }
    }
}
