/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;


public final class X1PAscendingOrDescendingKeyPhrase
    extends XPAscendingOrDescendingKeyPhrase
{
    private XPAscendingOrDescendingKeyPhrase _xPAscendingOrDescendingKeyPhrase_;
    private PAscendingOrDescendingKeyPhrase _pAscendingOrDescendingKeyPhrase_;

    public X1PAscendingOrDescendingKeyPhrase ()
    {
    }

    public X1PAscendingOrDescendingKeyPhrase (
        XPAscendingOrDescendingKeyPhrase _xPAscendingOrDescendingKeyPhrase_,
        PAscendingOrDescendingKeyPhrase _pAscendingOrDescendingKeyPhrase_)
    {
        setXPAscendingOrDescendingKeyPhrase (_xPAscendingOrDescendingKeyPhrase_);
        setPAscendingOrDescendingKeyPhrase (_pAscendingOrDescendingKeyPhrase_);
    }

    public Object clone ()
    {
        throw new RuntimeException("Unsupported Operation");
    }

    public void apply (Switch sw)
    {
        throw new RuntimeException("Switch not supported.");
    }

    public XPAscendingOrDescendingKeyPhrase getXPAscendingOrDescendingKeyPhrase ()
    {
        return _xPAscendingOrDescendingKeyPhrase_;
    }

    public void setXPAscendingOrDescendingKeyPhrase (
        XPAscendingOrDescendingKeyPhrase node)
    {
        if (_xPAscendingOrDescendingKeyPhrase_ != null)
        {
            _xPAscendingOrDescendingKeyPhrase_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _xPAscendingOrDescendingKeyPhrase_ = node;
    }

    public PAscendingOrDescendingKeyPhrase getPAscendingOrDescendingKeyPhrase ()
    {
        return _pAscendingOrDescendingKeyPhrase_;
    }

    public void setPAscendingOrDescendingKeyPhrase (
        PAscendingOrDescendingKeyPhrase node)
    {
        if (_pAscendingOrDescendingKeyPhrase_ != null)
        {
            _pAscendingOrDescendingKeyPhrase_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _pAscendingOrDescendingKeyPhrase_ = node;
    }

    void removeChild (Node child)
    {
        if (_xPAscendingOrDescendingKeyPhrase_ == child)
        {
            _xPAscendingOrDescendingKeyPhrase_ = null;
        }

        if (_pAscendingOrDescendingKeyPhrase_ == child)
        {
            _pAscendingOrDescendingKeyPhrase_ = null;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
    }

    public String toString ()
    {
        return "" + toString (_xPAscendingOrDescendingKeyPhrase_) +
        toString (_pAscendingOrDescendingKeyPhrase_);
    }
}
