/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.cb2xml.sablecc.parser;

import net.sf.cb2xml.sablecc.node.*;
import net.sf.cb2xml.sablecc.analysis.*;

class TokenIndex extends AnalysisAdapter
{
    int index;

    public void caseTDot(TDot node)
    {
        index = 0;
    }

    public void caseTComma(TComma node)
    {
        index = 1;
    }

    public void caseTSlash(TSlash node)
    {
        index = 2;
    }

    public void caseTPlus(TPlus node)
    {
        index = 3;
    }

    public void caseTMinus(TMinus node)
    {
        index = 4;
    }

    public void caseTStar(TStar node)
    {
        index = 5;
    }

    public void caseTDollar(TDollar node)
    {
        index = 6;
    }

    public void caseTLparen(TLparen node)
    {
        index = 7;
    }

    public void caseTRparen(TRparen node)
    {
        index = 8;
    }

    public void caseTNumber88(TNumber88 node)
    {
        index = 9;
    }

    public void caseTNumberNot88(TNumberNot88 node)
    {
        index = 10;
    }

    public void caseTAlphanumericLiteral(TAlphanumericLiteral node)
    {
        index = 11;
    }

    public void caseTNumericLiteral(TNumericLiteral node)
    {
        index = 12;
    }

    public void caseTDotZee(TDotZee node)
    {
        index = 13;
    }

    public void caseTAll(TAll node)
    {
        index = 14;
    }

    public void caseTAre(TAre node)
    {
        index = 15;
    }

    public void caseTAscending(TAscending node)
    {
        index = 16;
    }

    public void caseTBinary(TBinary node)
    {
        index = 17;
    }

    public void caseTBlank(TBlank node)
    {
        index = 18;
    }

    public void caseTBy(TBy node)
    {
        index = 19;
    }

    public void caseTCharacter(TCharacter node)
    {
        index = 20;
    }

    public void caseTComp(TComp node)
    {
        index = 21;
    }

    public void caseTComp1(TComp1 node)
    {
        index = 22;
    }

    public void caseTComp2(TComp2 node)
    {
        index = 23;
    }

    public void caseTComp3(TComp3 node)
    {
        index = 24;
    }

    public void caseTComp4(TComp4 node)
    {
        index = 25;
    }

    public void caseTComp5(TComp5 node)
    {
        index = 26;
    }

    public void caseTDate(TDate node)
    {
        index = 27;
    }

    public void caseTDepending(TDepending node)
    {
        index = 28;
    }

    public void caseTDescending(TDescending node)
    {
        index = 29;
    }

    public void caseTDisplay(TDisplay node)
    {
        index = 30;
    }

    public void caseTDisplay1(TDisplay1 node)
    {
        index = 31;
    }

    public void caseTExternal(TExternal node)
    {
        index = 32;
    }

    public void caseTFiller(TFiller node)
    {
        index = 33;
    }

    public void caseTFormat(TFormat node)
    {
        index = 34;
    }

    public void caseTFunctionPointer(TFunctionPointer node)
    {
        index = 35;
    }

    public void caseTGlobal(TGlobal node)
    {
        index = 36;
    }

    public void caseTHighValues(THighValues node)
    {
        index = 37;
    }

    public void caseTIndex(TIndex node)
    {
        index = 38;
    }

    public void caseTIndexed(TIndexed node)
    {
        index = 39;
    }

    public void caseTIs(TIs node)
    {
        index = 40;
    }

    public void caseTJustified(TJustified node)
    {
        index = 41;
    }

    public void caseTKey(TKey node)
    {
        index = 42;
    }

    public void caseTLeading(TLeading node)
    {
        index = 43;
    }

    public void caseTLeft(TLeft node)
    {
        index = 44;
    }

    public void caseTLowValues(TLowValues node)
    {
        index = 45;
    }

    public void caseTNational(TNational node)
    {
        index = 46;
    }

    public void caseTNative(TNative node)
    {
        index = 47;
    }

    public void caseTNulls(TNulls node)
    {
        index = 48;
    }

    public void caseTObject(TObject node)
    {
        index = 49;
    }

    public void caseTOccurs(TOccurs node)
    {
        index = 50;
    }

    public void caseTOn(TOn node)
    {
        index = 51;
    }

    public void caseTPackedDecimal(TPackedDecimal node)
    {
        index = 52;
    }

    public void caseTPicture(TPicture node)
    {
        index = 53;
    }

    public void caseTPointer(TPointer node)
    {
        index = 54;
    }

    public void caseTProcedurePointer(TProcedurePointer node)
    {
        index = 55;
    }

    public void caseTQuotes(TQuotes node)
    {
        index = 56;
    }

    public void caseTRedefines(TRedefines node)
    {
        index = 57;
    }

    public void caseTReference(TReference node)
    {
        index = 58;
    }

    public void caseTRenames(TRenames node)
    {
        index = 59;
    }

    public void caseTRight(TRight node)
    {
        index = 60;
    }

    public void caseTSeparate(TSeparate node)
    {
        index = 61;
    }

    public void caseTSign(TSign node)
    {
        index = 62;
    }

    public void caseTSpaces(TSpaces node)
    {
        index = 63;
    }

    public void caseTSynchronized(TSynchronized node)
    {
        index = 64;
    }

    public void caseTThrough(TThrough node)
    {
        index = 65;
    }

    public void caseTTimes(TTimes node)
    {
        index = 66;
    }

    public void caseTTo(TTo node)
    {
        index = 67;
    }

    public void caseTTrailing(TTrailing node)
    {
        index = 68;
    }

    public void caseTUsage(TUsage node)
    {
        index = 69;
    }

    public void caseTValue(TValue node)
    {
        index = 70;
    }

    public void caseTValues(TValues node)
    {
        index = 71;
    }

    public void caseTWhen(TWhen node)
    {
        index = 72;
    }

    public void caseTZeros(TZeros node)
    {
        index = 73;
    }

    public void caseTDataName(TDataName node)
    {
        index = 74;
    }

    public void caseEOF(EOF node)
    {
        index = 75;
    }
}
