/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

import java.util.*;


public final class ASequenceCharacterString extends PCharacterString
{
    private PCharacterString _characterString_;
    private PCharacterSubstring _characterSubstring_;

    public ASequenceCharacterString ()
    {
    }

    public ASequenceCharacterString (PCharacterString _characterString_,
        PCharacterSubstring _characterSubstring_)
    {
        setCharacterString (_characterString_);

        setCharacterSubstring (_characterSubstring_);
    }

    public Object clone ()
    {
        return new ASequenceCharacterString((PCharacterString) cloneNode (
                _characterString_),
            (PCharacterSubstring) cloneNode (_characterSubstring_));
    }

    public void apply (Switch sw)
    {
        ((Analysis) sw).caseASequenceCharacterString (this);
    }

    public PCharacterString getCharacterString ()
    {
        return _characterString_;
    }

    public void setCharacterString (PCharacterString node)
    {
        if (_characterString_ != null)
        {
            _characterString_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _characterString_ = node;
    }

    public PCharacterSubstring getCharacterSubstring ()
    {
        return _characterSubstring_;
    }

    public void setCharacterSubstring (PCharacterSubstring node)
    {
        if (_characterSubstring_ != null)
        {
            _characterSubstring_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _characterSubstring_ = node;
    }

    public String toString ()
    {
        return "" + toString (_characterString_) +
        toString (_characterSubstring_);
    }

    void removeChild (Node child)
    {
        if (_characterString_ == child)
        {
            _characterString_ = null;

            return;
        }

        if (_characterSubstring_ == child)
        {
            _characterSubstring_ = null;

            return;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
        if (_characterString_ == oldChild)
        {
            setCharacterString ((PCharacterString) newChild);

            return;
        }

        if (_characterSubstring_ == oldChild)
        {
            setCharacterSubstring ((PCharacterSubstring) newChild);

            return;
        }
    }
}
