/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

import java.util.*;


public final class AVariableOccursFixedOrVariable extends POccursFixedOrVariable
{
    private TOccurs _occurs_;
    private POccursTo _occursTo_;
    private PNumber _number_;
    private TTimes _times_;
    private TDepending _depending_;
    private TOn _on_;
    private TDataName _dataName_;

    public AVariableOccursFixedOrVariable ()
    {
    }

    public AVariableOccursFixedOrVariable (TOccurs _occurs_,
        POccursTo _occursTo_, PNumber _number_, TTimes _times_,
        TDepending _depending_, TOn _on_, TDataName _dataName_)
    {
        setOccurs (_occurs_);

        setOccursTo (_occursTo_);

        setNumber (_number_);

        setTimes (_times_);

        setDepending (_depending_);

        setOn (_on_);

        setDataName (_dataName_);
    }

    public Object clone ()
    {
        return new AVariableOccursFixedOrVariable((TOccurs) cloneNode (_occurs_),
            (POccursTo) cloneNode (_occursTo_), (PNumber) cloneNode (_number_),
            (TTimes) cloneNode (_times_), (TDepending) cloneNode (_depending_),
            (TOn) cloneNode (_on_), (TDataName) cloneNode (_dataName_));
    }

    public void apply (Switch sw)
    {
        ((Analysis) sw).caseAVariableOccursFixedOrVariable (this);
    }

    public TOccurs getOccurs ()
    {
        return _occurs_;
    }

    public void setOccurs (TOccurs node)
    {
        if (_occurs_ != null)
        {
            _occurs_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _occurs_ = node;
    }

    public POccursTo getOccursTo ()
    {
        return _occursTo_;
    }

    public void setOccursTo (POccursTo node)
    {
        if (_occursTo_ != null)
        {
            _occursTo_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _occursTo_ = node;
    }

    public PNumber getNumber ()
    {
        return _number_;
    }

    public void setNumber (PNumber node)
    {
        if (_number_ != null)
        {
            _number_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _number_ = node;
    }

    public TTimes getTimes ()
    {
        return _times_;
    }

    public void setTimes (TTimes node)
    {
        if (_times_ != null)
        {
            _times_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _times_ = node;
    }

    public TDepending getDepending ()
    {
        return _depending_;
    }

    public void setDepending (TDepending node)
    {
        if (_depending_ != null)
        {
            _depending_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _depending_ = node;
    }

    public TOn getOn ()
    {
        return _on_;
    }

    public void setOn (TOn node)
    {
        if (_on_ != null)
        {
            _on_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _on_ = node;
    }

    public TDataName getDataName ()
    {
        return _dataName_;
    }

    public void setDataName (TDataName node)
    {
        if (_dataName_ != null)
        {
            _dataName_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _dataName_ = node;
    }

    public String toString ()
    {
        return "" + toString (_occurs_) + toString (_occursTo_) +
        toString (_number_) + toString (_times_) + toString (_depending_) +
        toString (_on_) + toString (_dataName_);
    }

    void removeChild (Node child)
    {
        if (_occurs_ == child)
        {
            _occurs_ = null;

            return;
        }

        if (_occursTo_ == child)
        {
            _occursTo_ = null;

            return;
        }

        if (_number_ == child)
        {
            _number_ = null;

            return;
        }

        if (_times_ == child)
        {
            _times_ = null;

            return;
        }

        if (_depending_ == child)
        {
            _depending_ = null;

            return;
        }

        if (_on_ == child)
        {
            _on_ = null;

            return;
        }

        if (_dataName_ == child)
        {
            _dataName_ = null;

            return;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
        if (_occurs_ == oldChild)
        {
            setOccurs ((TOccurs) newChild);

            return;
        }

        if (_occursTo_ == oldChild)
        {
            setOccursTo ((POccursTo) newChild);

            return;
        }

        if (_number_ == oldChild)
        {
            setNumber ((PNumber) newChild);

            return;
        }

        if (_times_ == oldChild)
        {
            setTimes ((TTimes) newChild);

            return;
        }

        if (_depending_ == oldChild)
        {
            setDepending ((TDepending) newChild);

            return;
        }

        if (_on_ == oldChild)
        {
            setOn ((TOn) newChild);

            return;
        }

        if (_dataName_ == oldChild)
        {
            setDataName ((TDataName) newChild);

            return;
        }
    }
}
