/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

import java.util.*;


public final class AValueValueOrValues extends PValueOrValues
{
    private TValue _value_;
    private TIs _is_;

    public AValueValueOrValues ()
    {
    }

    public AValueValueOrValues (TValue _value_, TIs _is_)
    {
        setValue (_value_);

        setIs (_is_);
    }

    public Object clone ()
    {
        return new AValueValueOrValues((TValue) cloneNode (_value_),
            (TIs) cloneNode (_is_));
    }

    public void apply (Switch sw)
    {
        ((Analysis) sw).caseAValueValueOrValues (this);
    }

    public TValue getValue ()
    {
        return _value_;
    }

    public void setValue (TValue node)
    {
        if (_value_ != null)
        {
            _value_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _value_ = node;
    }

    public TIs getIs ()
    {
        return _is_;
    }

    public void setIs (TIs node)
    {
        if (_is_ != null)
        {
            _is_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _is_ = node;
    }

    public String toString ()
    {
        return "" + toString (_value_) + toString (_is_);
    }

    void removeChild (Node child)
    {
        if (_value_ == child)
        {
            _value_ = null;

            return;
        }

        if (_is_ == child)
        {
            _is_ = null;

            return;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
        if (_value_ == oldChild)
        {
            setValue ((TValue) newChild);

            return;
        }

        if (_is_ == oldChild)
        {
            setIs ((TIs) newChild);

            return;
        }
    }
}
