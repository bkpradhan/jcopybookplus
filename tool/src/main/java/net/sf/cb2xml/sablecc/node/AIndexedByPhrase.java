/* This file was generated by SableCC (http://www.sablecc.org/). */
package net.sf.cb2xml.sablecc.node;

import net.sf.cb2xml.sablecc.analysis.*;

import java.util.*;


public final class AIndexedByPhrase extends PIndexedByPhrase
{
    private TIndexed _indexed_;
    private TBy _by_;
    private final LinkedList _dataName_ = new TypedLinkedList(new DataName_Cast());

    public AIndexedByPhrase ()
    {
    }

    public AIndexedByPhrase (TIndexed _indexed_, TBy _by_, List _dataName_)
    {
        setIndexed (_indexed_);

        setBy (_by_);
        this._dataName_.clear ();
        this._dataName_.addAll (_dataName_);
    }

    public AIndexedByPhrase (TIndexed _indexed_, TBy _by_, XTDataName _dataName_)
    {
        setIndexed (_indexed_);

        setBy (_by_);

        if (_dataName_ != null)
        {
            while (_dataName_ instanceof X1TDataName)
            {
                this._dataName_.addFirst (((X1TDataName) _dataName_).getTDataName ());
                _dataName_ = ((X1TDataName) _dataName_).getXTDataName ();
            }

            this._dataName_.addFirst (((X2TDataName) _dataName_).getTDataName ());
        }
    }

    public Object clone ()
    {
        return new AIndexedByPhrase((TIndexed) cloneNode (_indexed_),
            (TBy) cloneNode (_by_), cloneList (_dataName_));
    }

    public void apply (Switch sw)
    {
        ((Analysis) sw).caseAIndexedByPhrase (this);
    }

    public TIndexed getIndexed ()
    {
        return _indexed_;
    }

    public void setIndexed (TIndexed node)
    {
        if (_indexed_ != null)
        {
            _indexed_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _indexed_ = node;
    }

    public TBy getBy ()
    {
        return _by_;
    }

    public void setBy (TBy node)
    {
        if (_by_ != null)
        {
            _by_.parent (null);
        }

        if (node != null)
        {
            if (node.parent () != null)
            {
                node.parent ().removeChild (node);
            }

            node.parent (this);
        }

        _by_ = node;
    }

    public LinkedList getDataName ()
    {
        return _dataName_;
    }

    public void setDataName (List list)
    {
        _dataName_.clear ();
        _dataName_.addAll (list);
    }

    public String toString ()
    {
        return "" + toString (_indexed_) + toString (_by_) +
        toString (_dataName_);
    }

    void removeChild (Node child)
    {
        if (_indexed_ == child)
        {
            _indexed_ = null;

            return;
        }

        if (_by_ == child)
        {
            _by_ = null;

            return;
        }

        if (_dataName_.remove (child))
        {
            return;
        }
    }

    void replaceChild (Node oldChild, Node newChild)
    {
        if (_indexed_ == oldChild)
        {
            setIndexed ((TIndexed) newChild);

            return;
        }

        if (_by_ == oldChild)
        {
            setBy ((TBy) newChild);

            return;
        }

        for (ListIterator i = _dataName_.listIterator (); i.hasNext ();)
        {
            if (i.next () == oldChild)
            {
                if (newChild != null)
                {
                    i.set (newChild);
                    oldChild.parent (null);

                    return;
                }

                i.remove ();
                oldChild.parent (null);

                return;
            }
        }
    }

    private class DataName_Cast implements Cast
    {
        public Object cast (Object o)
        {
            TDataName node = (TDataName) o;

            if ((node.parent () != null) &&
                    (node.parent () != AIndexedByPhrase.this))
            {
                node.parent ().removeChild (node);
            }

            if ((node.parent () == null) ||
                    (node.parent () != AIndexedByPhrase.this))
            {
                node.parent (AIndexedByPhrase.this);
            }

            return node;
        }
    }
}
